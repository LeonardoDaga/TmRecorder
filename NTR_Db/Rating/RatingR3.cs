using NTR_Common;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace NTR_Db
{
    public class RatingR3: RatingFunction
    {
        public static double rou_factor = 0.006153231 * 25;

        // Weights need to total 100
        public static double[,] weightR3 = new double[,] {
            // Str		   Sta			Pac			 Mar		  Tac		   Wor		    Pos			 Pas          Cro		   Tec			Hea			 Fin		  Lon		   Set
            {0.51872935, 0.29081119, 0.57222393, 0.89735816, 0.84487852, 0.50887940, 0.50887940, 0.13637928, 0.05248024, 0.09388931, 0.57549122, 0.00000000, 0.00000000, 0.0},	// DC
            {0.45240063, 0.31762087, 0.68150374, 0.77724031, 0.74690951, 0.50072196, 0.45947168, 0.17663123, 0.23886264, 0.18410349, 0.46453393, 0.00000000, 0.00000000, 0.0},	// DL/R
            {0.45240063, 0.31762087, 0.68150374, 0.77724031, 0.74690951, 0.50072196, 0.45947168, 0.17663123, 0.23886264, 0.18410349, 0.46453393, 0.00000000, 0.00000000, 0.0},	// DL/R
            {0.43789335, 0.31844356, 0.53515723, 0.63671706, 0.59109742, 0.51311701, 0.53184426, 0.32421168, 0.06318165, 0.27931537, 0.50093723, 0.19317517, 0.07490902, 0.0},	// DMC
            {0.42311032, 0.32315966, 0.62271745, 0.53932111, 0.51442838, 0.49835997, 0.47896659, 0.26434782, 0.22586124, 0.32182902, 0.45537227, 0.23961054, 0.09291562, 0.0},	// DML/R
            {0.42311032, 0.32315966, 0.62271745, 0.53932111, 0.51442838, 0.49835997, 0.47896659, 0.26434782, 0.22586124, 0.32182902, 0.45537227, 0.23961054, 0.09291562, 0.0},	// DML/R
            {0.31849880, 0.36581214, 0.50091016, 0.31726444, 0.28029020, 0.52022170, 0.55763723, 0.60199246, 0.10044356, 0.51811057, 0.38320838, 0.38594825, 0.14966211, 0.0},	// MC
            {0.35409971, 0.34443972, 0.64417234, 0.30427501, 0.27956082, 0.49925481, 0.46093655, 0.32887111, 0.38695101, 0.47884837, 0.37465446, 0.39194758, 0.15198852, 0.0},	// ML/R
            {0.35409971, 0.34443972, 0.64417234, 0.30427501, 0.27956082, 0.49925481, 0.46093655, 0.32887111, 0.38695101, 0.47884837, 0.37465446, 0.39194758, 0.15198852, 0.0},	// ML/R
            {0.32272636, 0.35024067, 0.48762872, 0.22888914, 0.19049636, 0.52620414, 0.57842512, 0.53330409, 0.07523792, 0.55942740, 0.39986691, 0.53866926, 0.20888391, 0.0},	// OMC
            {0.36311066, 0.33106245, 0.61831416, 0.19830147, 0.17415753, 0.50049575, 0.47737842, 0.28937553, 0.34729042, 0.52834210, 0.39939218, 0.55684664, 0.21593269, 0.0},	// OML/R
            {0.36311066, 0.33106245, 0.61831416, 0.19830147, 0.17415753, 0.50049575, 0.47737842, 0.28937553, 0.34729042, 0.52834210, 0.39939218, 0.55684664, 0.21593269, 0.0},	// OML/R
            {0.40622753, 0.29744114, 0.39446722, 0.09952139, 0.07503885, 0.50402399, 0.58505850, 0.36932466, 0.05210389, 0.53677990, 0.51998862, 0.83588627, 0.32413803, 0.0},	// F
            {0.37313433, 0.37313433, 0.37313433, 0.74626866, 0.52238806, 0.74626866, 0.52238806, 0.52238806, 0.37313433, 0.22388060, 0.22388060, 0.0, 0.0, 0.0}};	// GK

        public static double[,] weightRb = new double[,] {
            // Str		 Sta		 Pac		 Mar		 Tac		 Wor		 Pos		 Pas         Cro		 Tec		 Hea		 Fin		 Lon		 Set
            {0.10476131, 0.05214691, 0.07928798, 0.14443775, 0.13140328, 0.06543399, 0.07762453, 0.06649973, 0.05174317, 0.02761713, 0.12122597, 0.01365182, 0.02547069, 0.03869574},	// DC
            {0.07660230, 0.05043295, 0.11528887, 0.11701021, 0.12737497, 0.07681385, 0.06343039, 0.03777422, 0.10320519, 0.06396543, 0.09155298, 0.01367035, 0.02554511, 0.03733318},	// DL/R
            {0.07660230, 0.05043295, 0.11528887, 0.11701021, 0.12737497, 0.07681385, 0.06343039, 0.03777422, 0.10320519, 0.06396543, 0.09155298, 0.01367035, 0.02554511, 0.03733318},	// DL/R
            {0.08236460, 0.08557545, 0.07284710, 0.09846060, 0.08838358, 0.09150784, 0.09684525, 0.08929752, 0.04594195, 0.06011878, 0.05462556, 0.04891765, 0.05864571, 0.02646840},	// DMC
            {0.06705156, 0.06600599, 0.10002073, 0.08249862, 0.09719526, 0.09243450, 0.08504033, 0.06129130, 0.10295145, 0.08088686, 0.04665721, 0.03841339, 0.05222570, 0.02732710},	// DML/R
            {0.06705156, 0.06600599, 0.10002073, 0.08249862, 0.09719526, 0.09243450, 0.08504033, 0.06129130, 0.10295145, 0.08088686, 0.04665721, 0.03841339, 0.05222570, 0.02732710},	// DML/R
            {0.07333243, 0.08171847, 0.07197804, 0.08469622, 0.07098103, 0.09554048, 0.09470328, 0.09576006, 0.04729121, 0.07092367, 0.04588383, 0.05986604, 0.07170498, 0.03562024},	// MC
            {0.06527363, 0.06410270, 0.09701305, 0.07406706, 0.08563595, 0.09648566, 0.08651209, 0.06357183, 0.10819222, 0.07386495, 0.03245554, 0.05430668, 0.06572005, 0.03279859},	// ML/R
            {0.06527363, 0.06410270, 0.09701305, 0.07406706, 0.08563595, 0.09648566, 0.08651209, 0.06357183, 0.10819222, 0.07386495, 0.03245554, 0.05430668, 0.06572005, 0.03279859},	// ML/R
            {0.07886961, 0.07955547, 0.07497831, 0.06915926, 0.05059290, 0.08160950, 0.08206952, 0.10911727, 0.03482457, 0.07593779, 0.06515279, 0.07472116, 0.09098089, 0.03243097},	// OMC
            {0.06545375, 0.06145378, 0.10503536, 0.06421508, 0.07627526, 0.09232981, 0.07763931, 0.07001035, 0.11307331, 0.07298351, 0.04248486, 0.06462713, 0.07038293, 0.02403557},	// OML/R
            {0.06545375, 0.06145378, 0.10503536, 0.06421508, 0.07627526, 0.09232981, 0.07763931, 0.07001035, 0.11307331, 0.07298351, 0.04248486, 0.06462713, 0.07038293, 0.02403557},	// OML/R
            {0.07739710, 0.05095200, 0.07641981, 0.01310784, 0.01149133, 0.06383764, 0.07762980, 0.07632566, 0.02708970, 0.07771063, 0.12775187, 0.15339719, 0.12843583, 0.03845360},	// F
            {0.07466384, 0.07466384, 0.07466384, 0.14932769, 0.10452938, 0.14932769, 0.10452938, 0.10344411, 0.07512610, 0.04492581, 0.04479831, 0.0, 0.0, 0.0}};	// GK

        public static double[,] weightR = new double[,] {
            // REC weights 
            // Str				 Sta				Pac				    Mar				   Tac				   Wor				Pos				   Pas				  Cro				 Tec				Hea				   Fin				  Lon				 Set
            {0.653962303361921,  0.330014238020285, 0.562994547223387, 0.891800163983125,  0.871069095865164,  0.454514672470839, 0.555697278549252, 0.42777598627972,  0.338218821750765, 0.134348455965202, 0.796916786677566, 0.048831870932616, 0.116363443378865, 0.282347752982916},	//DC
			{0.565605120229193,  0.430973382039533, 0.917125432457378, 0.815702528287723,  0.99022325015212,   0.547995876625372, 0.522203232914265, 0.309928898819518, 0.837365352274204, 0.483822472259513, 0.656901420858592, 0.137582588344562, 0.163658117596413, 0.303915447383549},	//DL/R
			{0.565605120229193,  0.430973382039533, 0.917125432457378, 0.815702528287723,  0.99022325015212,   0.547995876625372, 0.522203232914265, 0.309928898819518, 0.837365352274204, 0.483822472259513, 0.656901420858592, 0.137582588344562, 0.163658117596413, 0.303915447383549},	//DL/R
			{0.55838825558912,   0.603683502357502, 0.563792314670998, 0.770425088563048,  0.641965853834719,  0.675495235675077, 0.683863478201805, 0.757342915150728, 0.473070797767482, 0.494107823556837, 0.397547163237438, 0.429660916538242, 0.56364174077388,  0.224791093448809},	//DMC
			{0.582074038075056,  0.420032202680124, 0.7887541874616,   0.726221389774063,  0.722972329840151,  0.737617252827595, 0.62234458453736,  0.466946909655194, 0.814382915598981, 0.561877829393632, 0.367446981999576, 0.360623408340649, 0.390057769678583, 0.249517737311268},	//DML/R
			{0.582074038075056,  0.420032202680124, 0.7887541874616,   0.726221389774063,  0.722972329840151,  0.737617252827595, 0.62234458453736,  0.466946909655194, 0.814382915598981, 0.561877829393632, 0.367446981999576, 0.360623408340649, 0.390057769678583, 0.249517737311268},	//DML/R
			{0.578431939417021,  0.778134685048085, 0.574726322388294, 0.71400292078636,   0.635403391007978,  0.822308254446722, 0.877857040588335, 0.864265671245476, 0.433450219618618, 0.697164252367046, 0.412568516841575, 0.586627586272733, 0.617905053049757, 0.308426814834866},	//MC
			{0.497429376361348,  0.545347364699553, 0.788280917110089, 0.578724574327427,  0.663235306043286,  0.772537143243647, 0.638706135095199, 0.538453108494387, 0.887935381275257, 0.572515970409641, 0.290549550901104, 0.476180499897665, 0.526149424898544, 0.287001645266184},	//ML/R
			{0.497429376361348,  0.545347364699553, 0.788280917110089, 0.578724574327427,  0.663235306043286,  0.772537143243647, 0.638706135095199, 0.538453108494387, 0.887935381275257, 0.572515970409641, 0.290549550901104, 0.476180499897665, 0.526149424898544, 0.287001645266184},	//ML/R
			{0.656437768926678,  0.617260722143117, 0.656569986958435, 0.63741054520629,   0.55148452726771,   0.922379789905246, 0.790553566121791, 0.999688557334153, 0.426203575603164, 0.778770912265944, 0.652374065121788, 0.662264393455567, 0.73120100926333,  0.274563618133769},	//OMC
			{0.483341947292063,  0.494773052635464, 0.799434804259974, 0.628789194186491,  0.633847969631333,  0.681354437033551, 0.671233869875345, 0.536121458625519, 0.849389745477645, 0.684067723274814, 0.389732973354501, 0.499972692291964, 0.577231818355874, 0.272773352088982},	//OML/R
			{0.483341947292063,  0.494773052635464, 0.799434804259974, 0.628789194186491,  0.633847969631333,  0.681354437033551, 0.671233869875345, 0.536121458625519, 0.849389745477645, 0.684067723274814, 0.389732973354501, 0.499972692291964, 0.577231818355874, 0.272773352088982},	//OML/R
			{0.493917051093473,  0.370423904816088, 0.532148929996192, 0.0629206658586336, 0.0904950078155216, 0.415494774080483, 0.54106107545574,  0.468181146095801, 0.158106484131194, 0.461125738338018, 0.83399612271067,  0.999828328674183, 0.827171977606305, 0.253225855459207},	//F
            // For  Rez    Vit  Ind  One  Ref Aer  Sar  Com    Deg    Aru
			{0.5, 0.333, 0.5, 1,   0.5, 1,  0.5, 0.5, 0.333, 0.333, 0.333, 0.0, 0.0, 0.0}}; //GK

        public static double[,] recLast = new double[,] { 
            //	DC	    DL/R	   DL/R	      DMC		  DML/R	      DML/R	      MC		  ML/R		  ML/R		  OMC		  OML/R	      OML/R	      F		      GK
            {14.866375, 15.980742, 15.980742, 15.8932675, 15.5835325, 15.5835325, 17.6955092, 16.6189141, 16.6189141, 18.1255351, 15.6304867, 15.6304867, 13.2762119, 15},
            {18.95664,  22.895539, 22.895539, 23.1801296, 23.2813871, 23.2813871, 26.8420884, 23.9940623, 23.9940623, 27.8974544, 24.54323,   24.54323,   19.5088591, 22.3}};

        public static double[,] adaFact = new double[,] {
            {1f,0.8f,0.8f,0.9f,0.7f,0.7f,0.8f,0.6f,0.6f,0.7f,0.6f,0.6f,0.6f},
            {0.8f,1f,0.9f,0.7f,0.9f,0.8f,0.7f,0.8f,0.7f,0.6f,0.8f,0.7f,0.6f},
            {0.8f,0.9f,1f,0.7f,0.8f,0.9f,0.7f,0.7f,0.8f,0.6f,0.7f,0.8f,0.6f},
            {0.9f,0.7f,0.7f,1f,0.8f,0.8f,0.9f,0.7f,0.7f,0.8f,0.6f,0.6f,0.6f},
            {0.7f,0.9f,0.8f,0.8f,1f,0.9f,0.6f,0.9f,0.8f,0.6f,0.8f,0.7f,0.6f},
            {0.7f,0.8f,0.9f,0.8f,0.9f,1f,0.6f,0.8f,0.9f,0.6f,0.7f,0.8f,0.6f},
            {0.8f,0.6f,0.6f,0.9f,0.7f,0.7f,1f,0.8f,0.8f,0.9f,0.7f,0.7f,0.8f},
            {0.6f,0.8f,0.7f,0.7f,0.9f,0.8f,0.8f,1f,0.9f,0.7f,0.9f,0.8f,0.6f},
            {0.6f,0.7f,0.8f,0.7f,0.8f,0.9f,0.8f,0.9f,1f,0.7f,0.8f,0.9f,0.6f},
            {0.7f,0.6f,0.6f,0.8f,0.6f,0.6f,0.9f,0.7f,0.7f,1f,0.8f,0.8f,0.9f},
            {0.6f,0.7f,0.6f,0.6f,0.8f,0.7f,0.7f,0.9f,0.8f,0.8f,1f,0.9f,0.7f},
            {0.6f,0.6f,0.7f,0.6f,0.7f,0.8f,0.7f,0.8f,0.9f,0.8f,0.9f,1f,0.7f},
            {0.6f,0.6f,0.6f,0.7f,0.6f,0.6f,0.8f,0.6f,0.6f,0.9f,0.7f,0.7f,1f}};

        public override Rating ComputeRating(PlayerData playerData)
        {
            double skillWeightSum, weight;
            double SI = playerData.ASI.actual;
            double rou = (double)playerData.Rou;
            double ada = (playerData.Ada == 0) ? 10 : (double)playerData.Ada;

            if (playerData.FPn == 0) // The player is a GK
            {
                skillWeightSum = (double)(Math.Pow((double)SI, 0.143) / 0.02979);
                weight = 48717927500;
            }
            else
            {
                skillWeightSum = (double)(Math.Pow(SI, 1 / 6.99194) / 0.02336483);
                weight = 263533760000;
            }

            double skillSum = (double)playerData.SkillSum.actual;

            // REREC remainder
            skillWeightSum -= skillSum;

            // RatingR2 remainder
            var remainder = Math.Round((Math.Pow(2.0, Math.Log(weight * SI) / Math.Log(Math.Pow(2, 7))) - (double)skillSum) * 10.0) / 10.0;

            int[] positionIndex = Rating.GetPositionIndex(playerData.FPn);

            int numFP = (positionIndex[1] == -1) ? 1 : 2;

            Rating[] Rv = new NTR_Db.Rating[numFP];

            for (int n = 0; n < numFP; n++)
            {
                Rating R = new NTR_Db.Rating();

                for (var j = 0; j < 13; j++) // All position
                {
                    double weightSumb = 0;
                    var remainderWeight = 0.0;		// REREC remainder weight sum
                    var remainderWeight2 = 0.0;		// RatingR2 remainder weight sum
                    var not20 = 0;					// 20以外のスキル数
                    if (playerData.FPn == 0) j = 13;	// GK

                    int weightLength = (playerData.FPn == 0) ? 11 : 14;
                    for (var i = 0; i < weightLength; i++)
                    {
                        R.rec[j] += (double)playerData.Skills[i].actual * weightR[j, i];
                        R.rating[j] += (double)playerData.Skills[i].actual * weightR3[j, i];
                        R.recb[j] += (double)playerData.Skills[i].actual * weightRb[j, i];

                        if (playerData.Skills[i].actual != 20M)
                        {
                            remainderWeight += weightR[j, i];
                            remainderWeight2 += weightR3[j, i];
                            weightSumb += weightRb[j, i];
                            not20++;
                        }
                    }

                    R.rec[j] += skillWeightSum * remainderWeight / not20;		//REREC Score

                    if (positionIndex[n] == 13)
                        R.rec[j] *= 1.27;					//GK

                    if (not20 == 0)
                        R.recb[j] = 6;       // All MAX
                    else
                        R.recb[j] = (R.recb[j] + remainder * weightSumb / not20 - 2) / 3;

                    R.rec[j] = funFix((R.rec[j] - recLast[0, j]) / recLast[1, j]);
                    R.rating[j] += remainder * remainderWeight2 / not20;
                    R.ratingR[j] = funFix(R.rating[j] * (1 + rou * rou_factor));
                    R.rating[j] = funFix(R.rating[j]);

                    if (playerData.FPn == 0)
                        j = 13;		// Loop end
                    else
                    {
                        double adaFactor = 1 - (1 - adaFact[j, positionIndex[n]]) * (20 - (double)ada)/20;
                        R.rec[j] *= adaFactor;
                        R.rating[j] *= adaFactor;
                        R.ratingR[j] *= adaFactor;
                    }
                }

                if (playerData.FPn != 0) // The player is a GK
                {
                    R.CK = funFix((double)(playerData.Skills[8].actual + playerData.Skills[13].actual + playerData.Skills[9].actual / 2) + rou / 2);
                    R.FK = funFix((double)(playerData.Skills[12].actual + playerData.Skills[13].actual + playerData.Skills[9].actual / 2) + rou / 2);
                    R.PK = funFix((double)(playerData.Skills[11].actual + playerData.Skills[13].actual + playerData.Skills[9].actual / 2) + rou / 2);
                }

                Rv[n] = R;
            }

            return Rating.Max(Rv);
        }

        public override string Name
        {
            get
            {
                return "RatingR2";
            }
        }

        public override string ShortName
        {
            get
            {
                return "R2";
            }
        }

        /// <summary>
        /// This function returns REREC values (3 values, rec, ratingR2 and ratingR2 modified by
        /// the routine
        /// </summary>
        /// <param name="gnsRow"></param>
        /// <returns></returns>
        public override Rating ComputeRating(TeamDS.GiocatoriNSkillRow gnsRow)
        {
            double skillWeightSum, weight;
            double SI = gnsRow.ASI;
            double rou = (double)gnsRow.Rou;
            double ada = (gnsRow.Ada == 0) ? 10 : (double)gnsRow.Ada;

            if (gnsRow.FPn == 0) // The player is a GK
            {
                skillWeightSum = (double)(Math.Pow((double)SI, 0.143) / 0.02979);
                weight = 48717927500;
            }
            else
            {
                skillWeightSum = (double)(Math.Pow((double)SI, 1 / 6.99194) / 0.02336483);
                weight = 263533760000;
            }

            double skillSum = (double)gnsRow.SkillSum;

            // REREC remainder
            skillWeightSum -= skillSum;

            // RatingR2 remainder
            var remainder = Math.Round((Math.Pow(2.0, Math.Log((double)(weight * SI)) / Math.Log(Math.Pow(2, 7))) - (double)skillSum) * 10.0) / 10.0;

            int[] positionIndex = Rating.GetPositionIndex(gnsRow.FPn);

            int numFP = (positionIndex[1] == -1) ? 1 : 2;

            Rating[] Rv = new NTR_Db.Rating[numFP];

            for (int n = 0; n < numFP; n++)
            {
                Rating R = new NTR_Db.Rating();

                for (var j = 0; j < 13; j++) // All position
                {
                    var remainderWeight = 0.0;		// REREC remainder weight sum
                    var remainderWeight2 = 0.0;		// RatingR2 remainder weight sum
                    var not20 = 0;					// 20以外のスキル数
                    if (gnsRow.FPn == 0) j = 13;	// GK

                    int weightLength = (gnsRow.FPn == 0) ? 11 : 14;
                    for (var i = 0; i < weightLength; i++)
                    {
                        R.rec[j] += (double)gnsRow.Skills[i] * weightR[j, i];
                        R.rating[j] += (double)gnsRow.Skills[i] * weightR3[j, i];

                        if (gnsRow.Skills[i] != 20M)
                        {
                            remainderWeight += weightR[j, i];
                            remainderWeight2 += weightR3[j, i];
                            not20 += 1;
                        }
                    }

                    R.rec[j] += skillWeightSum * remainderWeight / not20;		//REREC Score

                    if (positionIndex[n] == 13)
                        R.rec[j] *= 1.27;					//GK

                    R.rec[j] = funFix((R.rec[j] - recLast[0, j]) / recLast[1, j]);
                    R.rating[j] += remainder * remainderWeight2 / not20;
                    R.ratingR[j] = funFix(R.rating[j] * (1 + rou * rou_factor));
                    R.rating[j] = funFix(R.rating[j]);

                    if (gnsRow.FPn == 0)
                        j = 13;		// Loop end
                    else
                    {
                        double adaFactor = 1 - (1 - adaFact[j, positionIndex[n]]) * (20 - (double)ada) / 20;
                        R.rec[j] *= adaFactor;
                        R.rating[j] *= adaFactor;
                        R.ratingR[j] *= adaFactor;
                    }
                }

                Rv[n] = R;
            }

            return Rating.Max(Rv);
        }

        public Rating TransformToTMR(Rating R)
        {
            for (int i=12; i >= 0; i--)
            {
                int j = i / 3 * 2 + ((i % 3 > 0) ? 1 : 0);
                R.rec[i] = R.rec[j];
                R.ratingR[i] = R.ratingR[j];
            }

            return R;
        }

        public static double funFix(double i)
        {
            return (Math.Round(i * 100) / 100);
        }
    }
}
