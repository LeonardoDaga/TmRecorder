using Common;
using NTR_Common;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Resources;
using System.Text;

namespace NTR_Db
{
    public class RatingR5 : RatingFunction
    {
        private double _routineFactor = 0.006153231 * 25;
        private double wage_rate = 19.76;
		int youthID = 129474145;

		public new eRatingFunctionType RatingFunctionType => eRatingFunctionType.RatingR3;

        // Weights need to total 100
        private WeightMatrix _weightR5 = new double[,] {
            {0.41029304, 0.18048062, 0.56730138, 1.06344654, 1.02312672, 0.40831256, 0.58235457, 0.12717479, 0.05454137, 0.09089830, 0.42381693, 0.04626272, 0.02199046, 0}, // DC
            {0.42126371, 0.18293193, 0.60567629, 0.91904794, 0.89070915, 0.40038476, 0.56146633, 0.15053902, 0.15955429, 0.15682932, 0.42109742, 0.09460329, 0.03589655, 0}, // DL/R
            {0.23412419, 0.32032289, 0.62194779, 0.63162534, 0.63143081, 0.45218831, 0.47370658, 0.55054737, 0.17744915, 0.39932519, 0.26915814, 0.16413124, 0.07404301, 0}, // DMC
            {0.27276905, 0.26814289, 0.61104798, 0.39865092, 0.42862643, 0.43582015, 0.46617076, 0.44931076, 0.25175412, 0.46446692, 0.29986350, 0.43843061, 0.21494592, 0}, // DML/R
            {0.25219260, 0.25112993, 0.56090649, 0.18230261, 0.18376490, 0.45928749, 0.53498118, 0.59461481, 0.09851189, 0.61601950, 0.31243959, 0.65402884, 0.29982016, 0}, // MC
            {0.28155678, 0.24090675, 0.60680245, 0.19068879, 0.20018012, 0.45148647, 0.48230007, 0.42982389, 0.26268609, 0.57933805, 0.31712419, 0.65824985, 0.29885649, 0}, // ML/R
            {0.22029884, 0.29229690, 0.63248227, 0.09904394, 0.10043602, 0.47469498, 0.52919791, 0.77555880, 0.10531819, 0.71048302, 0.27667115, 0.56813972, 0.21537826, 0}, // OMC
            {0.21151292, 0.35804710, 0.88688492, 0.14391236, 0.13769621, 0.46586605, 0.34446036, 0.51377701, 0.59723919, 0.75126119, 0.16550722, 0.29966502, 0.12417045, 0}, // OML/R
            {0.35479780, 0.14887553, 0.43273380, 0.00023928, 0.00021111, 0.46931131, 0.57731335, 0.41686333, 0.05607604, 0.62121195, 0.45370457, 1.03660702, 0.43205492, 0}, // F
            {0.45462811, 0.30278232, 0.45462811, 0.90925623, 0.45462811, 0.90925623, 0.45462811, 0.45462811, 0.30278232, 0.15139116, 0.15139116, 0.0, 0.0, 0.0}}; // GK	
        //private WeightMatrix _weightAssist = new double[,] {
        //    {0.00189394, 0.09807900, 0.13636364, 0, 0, 0.09375000, 0.08996212, 0.30113636, 0.03449675, 0.24431818, 0, 0, 0, 0}, // Shortpassing
        //    {0.00219024, 0.10090738, 0.22027534, 0, 0, 0.09590113, 0.09152065, 0.25438048, 0.08995620, 0.14486859, 0, 0, 0, 0}, // Through balls
        //    {0.01562500, 0.09754464, 0.21071429, 0, 0, 0.09040179, 0.05915179, 0.18437500, 0.15691964, 0.18526786, 0, 0, 0, 0}, // Wings
        //    {0.00223499, 0.11318646, 0.24010217, 0, 0, 0.08764368, 0.08317369, 0.25446999, 0.04070881, 0.17848020, 0, 0, 0, 0}, // Direct
        //    {0.00333333, 0.09738095, 0.14476190, 0, 0, 0.08976190, 0.08309524, 0.27666667, 0.12071429, 0.18428571, 0, 0, 0, 0}, // Long balls
        //    {0.00438596, 0.10181704, 0.19047619, 0, 0, 0.09179198, 0.08302005, 0.25877193, 0.07988722, 0.18984962, 0, 0, 0, 0}}; // Balanced
        //private WeightMatrix _weightDefence = new double[,] {
        //    {0.01699757, 0.05099272, 0.08941580, 0.25724896, 0.34152264, 0.09884302, 0.12998143, 0, 0, 0, 0.01499786, 0, 0, 0},
        //    {0.02270559, 0.06048464, 0.23392482, 0.24441900, 0.24251097, 0.08624308, 0.08967754, 0, 0, 0, 0.02003435, 0, 0, 0},
        //    {0.04134184, 0.05031892, 0.16678479, 0.25537444, 0.29270021, 0.08221120, 0.08646350, 0, 0, 0, 0.02480510, 0, 0, 0},
        //    {0.02190318, 0.05245721, 0.12552917, 0.33591018, 0.21627094, 0.12442481, 0.10417817, 0, 0, 0, 0.01932634, 0, 0, 0},
        //    {0.10566556, 0.04724564, 0.11644776, 0.23936483, 0.20446971, 0.09017840, 0.09370712, 0, 0, 0, 0.10292100, 0, 0, 0},
        //    {0.03965345, 0.05231589, 0.14195268, 0.26691103, 0.26357881, 0.09730090, 0.10329890, 0, 0, 0, 0.03498834, 0, 0, 0}};
        private WeightMatrix _weightABal = new double[,] {
            {0.00276422, 0.10067205, 0.16547592, 0, 0, 0.09057143, 0.08504298, 0.27613666, 0.08638046, 0.19295627, 0, 0, 0, 0}, //DC
            {0.00442064, 0.10241347, 0.18932208, 0, 0, 0.08991175, 0.08107047, 0.25614835, 0.09842144, 0.17829181, 0, 0, 0, 0}, //DLR
            {0.00258676, 0.10122555, 0.17075867, 0, 0, 0.09110939, 0.08593586, 0.27616843, 0.07739470, 0.19482064, 0, 0, 0, 0}, //DMC
            {0.00326678, 0.10214868, 0.18073211, 0, 0, 0.09060837, 0.08407481, 0.26783111, 0.08275247, 0.18858565, 0, 0, 0, 0}, //DMLR
            {0.00217077, 0.10412690, 0.18835057, 0, 0, 0.09147931, 0.08713777, 0.27491544, 0.05128438, 0.20053487, 0, 0, 0, 0}, //MC
            {0.00401069, 0.09973343, 0.17156444, 0, 0, 0.09205432, 0.08403294, 0.26818903, 0.08251735, 0.19789780, 0, 0, 0, 0}, //MLR
            {0.00204832, 0.10083736, 0.18085991, 0, 0, 0.09394054, 0.08984389, 0.27755008, 0.05714698, 0.19777292, 0, 0, 0, 0}, //OMC
            {0.00501401, 0.10330073, 0.19217931, 0, 0, 0.09101568, 0.08098767, 0.25747692, 0.06584592, 0.20417978, 0, 0, 0, 0}, //OMLR
            {0.00200925, 0.10061759, 0.16988620, 0, 0, 0.09354589, 0.08952740, 0.28380866, 0.04908803, 0.21151698, 0, 0, 0, 0}}; //F
        private WeightMatrix _weightDBal = new double[,] {
           {0.03336560, 0.05319037, 0.14377141, 0.26763355, 0.26771576, 0.09844299, 0.10600777, 0, 0, 0, 0.02987255, 0, 0, 0},
            {0.03432328, 0.05314668, 0.14707558, 0.26690202, 0.26677011, 0.09743710, 0.10421476, 0, 0, 0, 0.03013048, 0, 0, 0},
            {0.03342026, 0.05327265, 0.14451824, 0.26631785, 0.26837303, 0.09800297, 0.10608690, 0, 0, 0, 0.03000810, 0, 0, 0},
            {0.04017728, 0.05218948, 0.14432124, 0.26532036, 0.26553143, 0.09590531, 0.10190701, 0, 0, 0, 0.03464790, 0, 0, 0},
            {0.03321351, 0.05318841, 0.14255567, 0.26792155, 0.26777895, 0.09880470, 0.10657690, 0, 0, 0, 0.02996031, 0, 0, 0},
            {0.03685060, 0.05291193, 0.14849502, 0.26553463, 0.26516723, 0.09638160, 0.10259796, 0, 0, 0, 0.03206104, 0, 0, 0},
            {0.03329700, 0.05319468, 0.14464604, 0.27009280, 0.26471479, 0.09915742, 0.10523286, 0, 0, 0, 0.02966442, 0, 0, 0},
            {0.03530321, 0.05379872, 0.15753782, 0.26267798, 0.26280546, 0.09529275, 0.10159547, 0, 0, 0, 0.03098860, 0, 0, 0},
            {0.02661505, 0.05528894, 0.17957068, 0.27999454, 0.24432637, 0.09915076, 0.09420038, 0, 0, 0, 0.02085327, 0, 0, 0}};
        private WeightMatrix _weightASho = new double[,] {
            {0, 0.02859171, 0.02859171, 0, 0, 0.02859171, 0.02859171, 0.10007097, 0, 0.08577512},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0.02303312, 0.02303312, 0, 0, 0.02303312, 0.02303312, 0.08061591, 0, 0.06909935},
            {0, 0.01005579, 0.01005579, 0, 0, 0.01005579, 0.01005579, 0.03519527, 0, 0.03016737},
            {0, 0.09523810, 0.09523810, 0, 0, 0.09523810, 0.09523810, 0.33333333, 0, 0.28571429},
            {0, 0.04051014, 0.04051014, 0, 0, 0.04051014, 0.04051014, 0.14178549, 0, 0.12153042},
            {0, 0.08318078, 0.08318078, 0, 0, 0.08318078, 0.08318078, 0.29113271, 0, 0.24954233},
            {0, 0.02792502, 0.02792502, 0, 0, 0.02792502, 0.02792502, 0.09773757, 0, 0.08377506},
            {0, 0.09292480, 0.09292480, 0, 0, 0.09292480, 0.09292480, 0.32523680, 0, 0.27877440}};
        private WeightMatrix _weightAThr = new double[,] {
            {0, 0.04755028, 0.11887571, 0, 0, 0.04755028, 0.04755028, 0.11887571, 0.04755028, 0.04755028},
            {0, 0.05368688, 0.13421720, 0, 0, 0.05368688, 0.05368688, 0.13421720, 0.05368688, 0.05368688},
            {0, 0.04848123, 0.12120307, 0, 0, 0.04848123, 0.04848123, 0.12120307, 0.04848123, 0.04848123},
            {0, 0.05651589, 0.14128973, 0, 0, 0.05651589, 0.05651589, 0.14128973, 0.05651589, 0.05651589},
            {0, 0.08702999, 0.21757497, 0, 0, 0.08702999, 0.08702999, 0.21757497, 0.08702999, 0.08702999},
            {0, 0.05817945, 0.14544862, 0, 0, 0.05817945, 0.05817945, 0.14544862, 0.05817945, 0.05817945},
            {0, 0.10000000, 0.25000000, 0, 0, 0.10000000, 0.10000000, 0.25000000, 0.10000000, 0.10000000},
            {0, 0.05165832, 0.12914580, 0, 0, 0.05165832, 0.05165832, 0.12914580, 0.05165832, 0.05165832},
            {0, 0.09793659, 0.24484147, 0, 0, 0.09793659, 0.09793659, 0.24484147, 0.09793659, 0.09793659}};
        private WeightMatrix _weightAWin = new double[,] {
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0.03061975, 0.06123949, 0.18371848, 0, 0, 0.06123949, 0, 0, 0.24495797, 0.12247899},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0.01382584, 0.02765167, 0.08295502, 0, 0, 0.02765167, 0, 0, 0.11060669, 0.05530335},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0.02218614, 0.04437227, 0.13311682, 0, 0, 0.04437227, 0, 0, 0.17748909, 0.08874454},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0.04347826, 0.08695652, 0.26086957, 0, 0, 0.08695652, 0, 0, 0.34782609, 0.17391304},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
        private WeightMatrix _weightADir = new double[,] {
            {0, 0.07520964, 0.17548915, 0, 0, 0.05013976, 0.05013976, 0.15041928, 0, 0.10027952},
            {0, 0.09537563, 0.22254314, 0, 0, 0.06358376, 0.06358376, 0.19075127, 0, 0.12716751},
            {0, 0.12500000, 0.29166667, 0, 0, 0.08333333, 0.08333333, 0.25000000, 0, 0.16666667},
            {0, 0.11101400, 0.25903266, 0, 0, 0.07400933, 0.07400933, 0.22202799, 0, 0.14801866},
            {0, 0.11062291, 0.25812013, 0, 0, 0.07374861, 0.07374861, 0.22124582, 0, 0.14749721},
            {0, 0.10893804, 0.25418876, 0, 0, 0.07262536, 0.07262536, 0.21787608, 0, 0.14525072},
            {0, 0.07190075, 0.16776842, 0, 0, 0.04793384, 0.04793384, 0.14380151, 0, 0.09586767},
            {0, 0.03200717, 0.07468340, 0, 0, 0.02133812, 0.02133812, 0.06401435, 0, 0.04267623},
            {0, 0.09856088, 0.22997539, 0, 0, 0.06570725, 0.06570725, 0.19712176, 0, 0.13141451}};
        private WeightMatrix _weightALon = new double[,] {
            {0, 0.08333333, 0, 0, 0, 0.08333333, 0.08333333, 0.33333333, 0.25000000, 0.16666667},
            {0, 0.05124751, 0, 0, 0, 0.05124751, 0.05124751, 0.20499004, 0.15374253, 0.10249502},
            {0, 0.05708605, 0, 0, 0, 0.05708605, 0.05708605, 0.22834419, 0.17125814, 0.11417210},
            {0, 0.04958375, 0, 0, 0, 0.04958375, 0.04958375, 0.19833502, 0.14875126, 0.09916751},
            {0, 0.00998916, 0, 0, 0, 0.00998916, 0.00998916, 0.03995664, 0.02996748, 0.01997832},
            {0, 0.02233372, 0, 0, 0, 0.02233372, 0.02233372, 0.08933487, 0.06700115, 0.04466744},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        };
        private WeightMatrix _weightASho2 = new double[,] {
            {0, 0.06730870, 0.09124884, 0, 0, 0.06362077, 0.06362077, 0.20914435, 0.08785123, 0.11922802},
            {0.00450435, 0.06043899, 0.11899608, 0, 0, 0.05576222, 0.04675351, 0.14212098, 0.10084866, 0.08783143},
            {0, 0.06550198, 0.10684459, 0, 0, 0.05937256, 0.05937256, 0.18791317, 0.06720133, 0.10779898},
            {0.00203387, 0.06316406, 0.11722427, 0, 0, 0.05772045, 0.05365272, 0.16403037, 0.08099827, 0.09506144},
            {0, 0.10055996, 0.17719784, 0, 0, 0.09513553, 0.09513553, 0.29047785, 0.04642320, 0.19507009},
            {0.00326372, 0.07258041, 0.13954252, 0, 0, 0.06723859, 0.06071116, 0.18445832, 0.06970589, 0.12717988},
            {0, 0.09244576, 0.17274623, 0, 0, 0.08892008, 0.08892008, 0.26356276, 0.04413183, 0.17144521},
            {0.00639592, 0.05296688, 0.11902513, 0, 0, 0.05139740, 0.03860556, 0.11075222, 0.07396511, 0.09266587},
            {0, 0.09987761, 0.18404130, 0, 0, 0.09504464, 0.09504464, 0.28460205, 0.04322121, 0.18902555}};
        private WeightMatrix _weightAThr2 = new double[,] {
            {0, 0.06086869, 0.12249491, 0, 0, 0.05910502, 0.05910502, 0.16694636, 0.07546436, 0.07615446},
            {0.00215410, 0.06667221, 0.15132879, 0, 0, 0.06443565, 0.06012745, 0.16238773, 0.08599717, 0.07977198},
            {0, 0.06158727, 0.13251818, 0, 0, 0.05865602, 0.05865602, 0.16167723, 0.06624396, 0.07412675},
            {0.00097265, 0.06828739, 0.15377877, 0, 0, 0.06568412, 0.06373882, 0.17196712, 0.07849440, 0.08018511},
            {0, 0.09342159, 0.22191019, 0, 0, 0.09082748, 0.09082748, 0.23634768, 0.08342636, 0.10683003},
            {0.00156079, 0.06887829, 0.16229516, 0, 0, 0.06632369, 0.06320211, 0.16687312, 0.07426440, 0.08146763},
            {0, 0.10067782, 0.24460456, 0, 0, 0.09899175, 0.09899175, 0.25333009, 0.09145497, 0.11069317},
            {0.00305869, 0.05701132, 0.14311452, 0, 0, 0.05626076, 0.05014337, 0.12750712, 0.07171366, 0.06667554},
            {0, 0.10115413, 0.24475095, 0, 0, 0.09884287, 0.09884287, 0.25407093, 0.08956788, 0.11277037}};
        private WeightMatrix _weightAWin2 = new double[,] {
            {0, 0.04225231, 0.06418877, 0, 0, 0.03990278, 0.03990278, 0.12658467, 0.06042507, 0.06515848},
            {0.02295724, 0.08371143, 0.20891484, 0, 0, 0.08073193, 0.03481745, 0.10312186, 0.22998134, 0.14133791},
            {0, 0.04217719, 0.07533138, 0, 0, 0.03827223, 0.03827223, 0.11673707, 0.04735657, 0.06093047},
            {0.01036596, 0.06188936, 0.14055609, 0, 0, 0.05842132, 0.03768940, 0.11148288, 0.12946112, 0.09677401},
            {0, 0.05528222, 0.11634162, 0, 0, 0.05182640, 0.05182640, 0.14616214, 0.03773190, 0.08161443},
            {0.01663412, 0.07359684, 0.18265559, 0, 0, 0.07019365, 0.03692541, 0.10592847, 0.16629992, 0.12308049},
            {0, 0.05347288, 0.11868897, 0, 0, 0.05122672, 0.05122672, 0.13955974, 0.03748764, 0.07421258},
            {0.03259795, 0.09066534, 0.25410493, 0, 0, 0.08966544, 0.02446955, 0.06527805, 0.28014906, 0.16306968},
            {0, 0.05628111, 0.12366833, 0, 0, 0.05320210, 0.05320210, 0.14641423, 0.03671411, 0.08002005}};
        private WeightMatrix _weightADir2 = new double[,] {
            {0, 0.08075120, 0.06418877, 0, 0, 0.05949152, 0.05949152, 0.18569886, 0.03585454, 0.11366435},
            {0.00199739, 0.09795727, 0.20891484, 0, 0, 0.07099723, 0.06700245, 0.20358339, 0.04121776, 0.13499025},
            {0, 0.11981065, 0.07533138, 0, 0, 0.08447662, 0.08447662, 0.25739438, 0.02663692, 0.16334105},
            {0.00090189, 0.10951085, 0.14055609, 0, 0, 0.07813027, 0.07632650, 0.23132927, 0.03223086, 0.14919847},
            {0, 0.10929674, 0.11634162, 0, 0, 0.07802672, 0.07802672, 0.23106156, 0.01490855, 0.14764675},
            {0.00144725, 0.10676876, 0.18265559, 0, 0, 0.07597500, 0.07308050, 0.21872210, 0.02711490, 0.14561345},
            {0, 0.07659390, 0.11868897, 0, 0, 0.05626955, 0.05626955, 0.16357267, 0.01304641, 0.10206713},
            {0.00283618, 0.04041881, 0.25410493, 0, 0, 0.03137127, 0.02569892, 0.07415911, 0.02942897, 0.05686726},
            {0, 0.09923451, 0.12366833, 0, 0, 0.07137408, 0.07137408, 0.20917165, 0.01277721, 0.13284697}};
        private WeightMatrix _weightALon2 = new double[,] {
            {0, 0.09135249, 0.08015464, 0, 0, 0.08668146, 0.08668146, 0.30922528, 0.18710149, 0.15880317},
            {0.00285254, 0.07820315, 0.10859446, 0, 0, 0.07227967, 0.06657458, 0.22444246, 0.14699134, 0.12455340},
            {0, 0.08257883, 0.10205393, 0, 0, 0.07481548, 0.07481548, 0.25536345, 0.13409849, 0.13411006},
            {0.00128802, 0.07902599, 0.10975275, 0, 0, 0.07213126, 0.06955523, 0.23228564, 0.13214762, 0.12431357},
            {0, 0.07033421, 0.13969444, 0, 0, 0.06346377, 0.06346377, 0.18620577, 0.05273479, 0.10502058},
            {0.00206687, 0.06571937, 0.11843836, 0, 0, 0.05895357, 0.05481984, 0.17098947, 0.08361022, 0.10070354},
            {0, 0.05985233, 0.13361060, 0, 0, 0.05538680, 0.05538680, 0.15212416, 0.03726411, 0.08270112},
            {0.00405045, 0.03640027, 0.08942853, 0, 0, 0.03441240, 0.02631151, 0.07085240, 0.05165358, 0.05266056},
            {0, 0.06512748, 0.14435549, 0, 0, 0.05900617, 0.05900617, 0.16390511, 0.03649520, 0.09178552}};
        private WeightMatrix _weightABal2 = new double[,] {
            {0, 0.07964933, 0.13049122, 0, 0, 0.07202489, 0.07202489, 0.22705993, 0.09804267, 0.11994034},
            {0.00310411, 0.08203883, 0.16794454, 0, 0, 0.07237004, 0.06616183, 0.19632672, 0.09999489, 0.11208474},
            {0, 0.08716561, 0.16630390, 0, 0, 0.07449362, 0.07449362, 0.22645828, 0.07683839, 0.12337579},
            {0.00140161, 0.08634351, 0.17482178, 0, 0, 0.07508937, 0.07228615, 0.21422573, 0.08671568, 0.11749548},
            {0, 0.10537469, 0.22687560, 0, 0, 0.09416019, 0.09416019, 0.26679060, 0.06122188, 0.15141683},
            {0.00224914, 0.08601186, 0.18609034, 0, 0, 0.07496817, 0.07046989, 0.20330035, 0.07190556, 0.12136807},
            {0, 0.09669569, 0.21709005, 0, 0, 0.08940669, 0.08940669, 0.24480884, 0.06082555, 0.13199094},
            {0.00440765, 0.05467208, 0.13241390, 0, 0, 0.05142733, 0.04261203, 0.11447588, 0.06668265, 0.07613425},
            {0, 0.10518906, 0.23451157, 0, 0, 0.09519736, 0.09519736, 0.26362858, 0.05957047, 0.14646773}};
        private WeightMatrix _weightDSho = new double[,] {
            {0, 0.05000000, 0.05000000, 0.25000000, 0.40000000, 0.10000000, 0.15000000, 0, 0, 0, 0},
            {0, 0.04285714, 0.04285714, 0.21428571, 0.34285714, 0.08571429, 0.12857143, 0, 0, 0, 0},
            {0, 0.04000000, 0.04000000, 0.20000000, 0.32000000, 0.08000000, 0.12000000, 0, 0, 0, 0},
            {0, 0.03428571, 0.03428571, 0.17142857, 0.27428571, 0.06857143, 0.10285714, 0, 0, 0, 0},
            {0, 0.04714286, 0.04714286, 0.23571429, 0.37714286, 0.09428571, 0.14142857, 0, 0, 0, 0},
            {0, 0.04000000, 0.04000000, 0.20000000, 0.32000000, 0.08000000, 0.12000000, 0, 0, 0, 0},
            {0, 0.02285714, 0.02285714, 0.11428571, 0.18285714, 0.04571429, 0.06857143, 0, 0, 0, 0},
            {0, 0.01714286, 0.01714286, 0.08571429, 0.13714286, 0.03428571, 0.05142857, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
        private WeightMatrix _weightDThr = new double[,] {
            {0, 0.07142857, 0.35714286, 0.21428571, 0.21428571, 0.07142857, 0.07142857, 0, 0, 0, 0},
            {0, 0.05714286, 0.28571429, 0.17142857, 0.17142857, 0.05714286, 0.05714286, 0, 0, 0, 0},
            {0, 0.06785714, 0.33928571, 0.20357143, 0.20357143, 0.06785714, 0.06785714, 0, 0, 0, 0},
            {0, 0.04642857, 0.23214286, 0.13928571, 0.13928571, 0.04642857, 0.04642857, 0, 0, 0, 0},
            {0, 0.05357143, 0.26785714, 0.16071429, 0.16071429, 0.05357143, 0.05357143, 0, 0, 0, 0},
            {0, 0.04464286, 0.22321429, 0.13392857, 0.13392857, 0.04464286, 0.04464286, 0, 0, 0, 0},
            {0, 0.03035714, 0.15178571, 0.09107143, 0.09107143, 0.03035714, 0.03035714, 0, 0, 0, 0},
            {0, 0.01964286, 0.09821429, 0.05892857, 0.05892857, 0.01964286, 0.01964286, 0, 0, 0, 0},
            {0, 0.02500000, 0.12500000, 0.07500000, 0.07500000, 0.02500000, 0.02500000, 0, 0, 0, 0}};
        private WeightMatrix _weightDWin = new double[,] {
            {0.03787879, 0.03787879, 0.18939394, 0.18939394, 0.30303030, 0.03787879, 0.03787879, 0, 0, 0, 0},
            {0.04545455, 0.04545455, 0.22727273, 0.22727273, 0.36363636, 0.04545455, 0.04545455, 0, 0, 0, 0},
            {0.01212121, 0.01212121, 0.06060606, 0.06060606, 0.09696970, 0.01212121, 0.01212121, 0, 0, 0, 0},
            {0.04090909, 0.04090909, 0.20454545, 0.20454545, 0.32727273, 0.04090909, 0.04090909, 0, 0, 0, 0},
            {0.00909091, 0.00909091, 0.04545455, 0.04545455, 0.07272727, 0.00909091, 0.00909091, 0, 0, 0, 0},
            {0.03333333, 0.03333333, 0.16666667, 0.16666667, 0.26666667, 0.03333333, 0.03333333, 0, 0, 0, 0},
            {0.00606061, 0.00606061, 0.03030303, 0.03030303, 0.04848485, 0.00606061, 0.00606061, 0, 0, 0, 0},
            {0.03030303, 0.03030303, 0.15151515, 0.15151515, 0.24242424, 0.03030303, 0.03030303, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
        private WeightMatrix _weightDDir = new double[,] {
            {0, 0.05263158, 0.10526316, 0.42105263, 0.15789474, 0.15789474, 0.10526316, 0, 0, 0, 0},
            {0, 0.04251012, 0.08502024, 0.34008097, 0.12753036, 0.12753036, 0.08502024, 0, 0, 0, 0},
            {0, 0.05060729, 0.10121457, 0.40485830, 0.15182186, 0.15182186, 0.10121457, 0, 0, 0, 0},
            {0, 0.02631579, 0.05263158, 0.21052632, 0.07894737, 0.07894737, 0.05263158, 0, 0, 0, 0},
            {0, 0.04655870, 0.09311741, 0.37246964, 0.13967611, 0.13967611, 0.09311741, 0, 0, 0, 0},
            {0, 0.03846154, 0.07692308, 0.30769231, 0.11538462, 0.11538462, 0.07692308, 0, 0, 0, 0},
            {0, 0.02226721, 0.04453441, 0.17813765, 0.06680162, 0.06680162, 0.04453441, 0, 0, 0, 0},
            {0, 0.01214575, 0.02429150, 0.09716599, 0.03643725, 0.03643725, 0.02429150, 0, 0, 0, 0},
            {0, 0.01619433, 0.03238866, 0.12955466, 0.04858300, 0.04858300, 0.03238866, 0, 0, 0, 0}};
        private WeightMatrix _weightDLon = new double[,] {
            {0.21428571, 0.03571429, 0.07142857, 0.14285714, 0.10714286, 0.07142857, 0.07142857, 0, 0, 0, 0.28571429},
            {0.18367347, 0.03061224, 0.06122449, 0.12244898, 0.09183673, 0.06122449, 0.06122449, 0, 0, 0, 0.24489796},
            {0.16836735, 0.02806122, 0.05612245, 0.11224490, 0.08418367, 0.05612245, 0.05612245, 0, 0, 0, 0.22448980},
            {0.15306122, 0.02551020, 0.05102041, 0.10204082, 0.07653061, 0.05102041, 0.05102041, 0, 0, 0, 0.20408163},
            {0.12244898, 0.02040816, 0.04081633, 0.08163265, 0.06122449, 0.04081633, 0.04081633, 0, 0, 0, 0.16326531},
            {0.09183673, 0.01530612, 0.03061224, 0.06122449, 0.04591837, 0.03061224, 0.03061224, 0, 0, 0, 0.12244898},
            {0.03061224, 0.00510204, 0.01020408, 0.02040816, 0.01530612, 0.01020408, 0.01020408, 0, 0, 0, 0.04081633},
            {0.01530612, 0.00255102, 0.00510204, 0.01020408, 0.00765306, 0.00510204, 0.00510204, 0, 0, 0, 0.02040816},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
        private WeightMatrix _weightDSho2 = new double[,] {
            {0.02351850, 0.05174242, 0.10885426, 0.24146309, 0.32864208, 0.09342436, 0.12354377, 0, 0, 0, 0.02881152},
            {0.02081352, 0.04425684, 0.09322829, 0.20734042, 0.28468582, 0.07972176, 0.10566963, 0, 0, 0, 0.02469559},
            {0.01758937, 0.04247508, 0.09135745, 0.19667236, 0.26157344, 0.07662652, 0.10029338, 0, 0, 0, 0.02263763},
            {0.01749739, 0.03545775, 0.07569886, 0.16465119, 0.22905140, 0.06315689, 0.08430303, 0, 0, 0, 0.02057966},
            {0.01280616, 0.04386743, 0.08251932, 0.20811520, 0.28839592, 0.08152075, 0.11007361, 0, 0, 0, 0.01646373},
            {0.01094152, 0.03813457, 0.07535078, 0.18144170, 0.25389952, 0.06977501, 0.09405426, 0, 0, 0, 0.01234780},
            {0.00339253, 0.02151661, 0.04274348, 0.10125305, 0.14098769, 0.03925853, 0.05311781, 0, 0, 0, 0.00411593},
            {0.00307136, 0.01660520, 0.03547113, 0.07866357, 0.11363750, 0.02932373, 0.03994783, 0, 0, 0, 0.00205797},
            {0, 0.00459803, 0.02054060, 0.01787671, 0.01379410, 0.00623108, 0.00541455, 0, 0, 0, 0}};
        private WeightMatrix _weightDThr2 = new double[,] {
            {0.02351850, 0.06254674, 0.26371620, 0.22345589, 0.23500462, 0.07901859, 0.08392793, 0, 0, 0, 0.02881152},
            {0.02081352, 0.05145972, 0.21567727, 0.18573178, 0.19825125, 0.06531599, 0.06965522, 0, 0, 0, 0.02469559},
            {0.01758937, 0.05652070, 0.24225781, 0.19847308, 0.20286996, 0.07050408, 0.07400287, 0, 0, 0, 0.02263763},
            {0.01749739, 0.04158019, 0.17545876, 0.14844471, 0.16098417, 0.05199242, 0.05585165, 0, 0, 0, 0.02057966},
            {0.01280616, 0.04710873, 0.19380383, 0.17030007, 0.17927227, 0.06099254, 0.06577590, 0, 0, 0, 0.01646373},
            {0.01094152, 0.04047551, 0.16772773, 0.14812837, 0.16008199, 0.05194788, 0.05605906, 0, 0, 0, 0.01234780},
            {0.00339253, 0.02529813, 0.10774948, 0.08954837, 0.09470918, 0.03151543, 0.03385010, 0, 0, 0, 0.00411593},
            {0.00307136, 0.01786571, 0.07634748, 0.06515816, 0.07420173, 0.02194077, 0.02392142, 0, 0, 0, 0.00205797},
            {0, 0.01720308, 0.08356581, 0.05569183, 0.05160923, 0.01883612, 0.01801960, 0, 0, 0, 0}};
        private WeightMatrix _weightDWin2 = new double[,] {
            {0.03919295, 0.05157883, 0.18438446, 0.23191400, 0.30286959, 0.07443731, 0.08501062, 0, 0, 0, 0.03061224},
            {0.03915982, 0.04876222, 0.18122110, 0.22287341, 0.30108722, 0.06807635, 0.07727862, 0, 0, 0, 0.02623907},
            {0.02323416, 0.03616757, 0.12082772, 0.15688298, 0.18804817, 0.05531063, 0.06331381, 0, 0, 0, 0.02405248},
            {0.03393188, 0.04080813, 0.15487693, 0.18563878, 0.25600510, 0.05554459, 0.06331849, 0, 0, 0, 0.02186589},
            {0.01701564, 0.03268405, 0.09886764, 0.14575714, 0.18067043, 0.05248662, 0.06261996, 0, 0, 0, 0.01749271},
            {0.02412536, 0.03826671, 0.13737525, 0.17674226, 0.23980012, 0.05474181, 0.06339566, 0, 0, 0, 0.01311953},
            {0.00587729, 0.01696449, 0.05511404, 0.07484424, 0.09449272, 0.02601936, 0.03094892, 0, 0, 0, 0.00437318},
            {0.01462695, 0.02271202, 0.09242080, 0.10682042, 0.15603032, 0.02887851, 0.03281968, 0, 0, 0, 0.00218659},
            {0, 0.00622470, 0.02852082, 0.02301186, 0.01867409, 0.00795980, 0.00709225, 0, 0, 0, 0}};
        private WeightMatrix _weightDDir2 = new double[,] {
            {0.02351850, 0.05225420, 0.12680460, 0.34675784, 0.19152197, 0.12989368, 0.10043769, 0, 0, 0, 0.02881152},  //DC
            {0.02081352, 0.04332659, 0.10649383, 0.28561270, 0.16304753, 0.10646282, 0.08292077, 0, 0, 0, 0.02469559},  //DLR
            {0.01758937, 0.04748837, 0.11330480, 0.32044017, 0.16568895, 0.12069401, 0.09155646, 0, 0, 0, 0.02263763},  //DMC
            {0.01749739, 0.03002336, 0.07682289, 0.18992762, 0.11767022, 0.07055121, 0.05675959, 0, 0, 0, 0.02057966},  //DMLR
            {0.01280616, 0.04318986, 0.09920740, 0.29463944, 0.15563092, 0.11103667, 0.08527310, 0, 0, 0, 0.01646373},  //MC
            {0.01094152, 0.03696965, 0.08845310, 0.24993140, 0.13948036, 0.09296690, 0.07179043, 0, 0, 0, 0.01234780},  //MLR
            {0.00339253, 0.02078153, 0.04935853, 0.14105663, 0.07539707, 0.05279156, 0.04050117, 0, 0, 0, 0.00411593},  //OMC
            {0.00307136, 0.01345569, 0.03570872, 0.08694287, 0.05664995, 0.03136379, 0.02513140, 0, 0, 0, 0.00205797},  //OMLR
            {0, 0.01313578, 0.03383459, 0.09248120, 0.03940734, 0.03436533, 0.02375055, 0, 0, 0, 0}	//F
			};
        private WeightMatrix _weightDLon2 = new double[,] {
            {0.08834443, 0.04863381, 0.13360942, 0.21587391, 0.21847591, 0.08625938, 0.09355704, 0, 0, 0, 0.11524610},  //DC
            {0.07637860, 0.04125529, 0.11315556, 0.18373963, 0.18924660, 0.07298088, 0.07949846, 0, 0, 0, 0.09878237},  //DLR
            {0.06852403, 0.04080273, 0.11441131, 0.18063366, 0.17588413, 0.07241209, 0.07739287, 0, 0, 0, 0.09055051},  //DMC
            {0.06380162, 0.03301337, 0.09166245, 0.14401060, 0.15257061, 0.05725404, 0.06324381, 0, 0, 0, 0.08231864},  //DMLR
            {0.04984955, 0.03607430, 0.09405191, 0.16461598, 0.16993850, 0.06558091, 0.07277067, 0, 0, 0, 0.06585491},  //MC
            {0.03872406, 0.03082068, 0.08361015, 0.14155772, 0.15128557, 0.05483556, 0.06104112, 0, 0, 0, 0.04939119},  //MLR
            {0.01265337, 0.01649373, 0.04650923, 0.07490208, 0.07982060, 0.02880487, 0.03232174, 0, 0, 0, 0.01646373},  //OMC
            {0.00770178, 0.01206496, 0.03627660, 0.05504700, 0.06544295, 0.01986524, 0.02296218, 0, 0, 0, 0.00823186},  //OMLR
            {0, 0.00667506, 0.02847617, 0.02819039, 0.02002518, 0.00994114, 0.00830810, 0, 0, 0, 0}	//F
			};
        private WeightMatrix _weightDBal2 = new double[,] {
            {0.03432282, 0.05452880, 0.16196603, 0.24790778, 0.26137096, 0.09350018, 0.10318615, 0, 0, 0, 0.04321729},  //DC
            {0.03007437, 0.04576532, 0.13514081, 0.20891264, 0.22438533, 0.07838200, 0.08707794, 0, 0, 0, 0.03704339},  //DLR
            {0.02607848, 0.04715645, 0.14361335, 0.21344593, 0.21511336, 0.08082842, 0.08729118, 0, 0, 0, 0.03395644},  //DMC
            {0.02521476, 0.03604833, 0.10832060, 0.16023333, 0.17896240, 0.05996893, 0.06808923, 0, 0, 0, 0.03086949},  //DMLR
            {0.01898006, 0.04343295, 0.12022178, 0.20279229, 0.21578394, 0.07724354, 0.08683970, 0, 0, 0, 0.02469559},  //MC
            {0.01557194, 0.03743664, 0.10631387, 0.17531034, 0.19130153, 0.06550493, 0.07380486, 0, 0, 0, 0.01852169},  //MLR
            {0.00493600, 0.02169636, 0.06379325, 0.09944718, 0.10695311, 0.03727163, 0.04197070, 0, 0, 0, 0.00617390},  //OMC
            {0.00384310, 0.01574372, 0.04784781, 0.07195950, 0.08512269, 0.02585435, 0.03006760, 0, 0, 0, 0.00308695},  //OMLR
            {0, 0.01001259, 0.04271425, 0.04228558, 0.03003776, 0.01491171, 0.01246215, 0, 0, 0, 0}	//F
			};
        // RECb weights
        private WeightMatrix _weightRb = new double[,] {
            {0.10493615, 0.05208547, 0.07934211, 0.14448971, 0.13159554, 0.06553072, 0.07778375, 0.06669303, 0.05158306, 0.02753168, 0.12055170, 0.01350989, 0.02549169, 0.03887550},   // DC
            {0.07715535, 0.04943315, 0.11627229, 0.11638685, 0.12893778, 0.07747251, 0.06370799, 0.03830611, 0.10361093, 0.06253997, 0.09128094, 0.01314110, 0.02449199, 0.03726305},   // DL/R
            {0.08219824, 0.08668831, 0.07434242, 0.09661001, 0.08894242, 0.08998026, 0.09281287, 0.08868309, 0.04753574, 0.06042619, 0.05396986, 0.05059984, 0.05660203, 0.03060871},   // DMC
            {0.06744248, 0.06641401, 0.09977251, 0.08253749, 0.09709316, 0.09241026, 0.08513703, 0.06127851, 0.10275520, 0.07985941, 0.04618960, 0.03927270, 0.05285911, 0.02697852},   // DML/R
            {0.07304213, 0.08174111, 0.07248656, 0.08482334, 0.07078726, 0.09568392, 0.09464529, 0.09580381, 0.04746231, 0.07093008, 0.04595281, 0.05955544, 0.07161249, 0.03547345},   // MC
            {0.06527363, 0.06410270, 0.09701305, 0.07406706, 0.08563595, 0.09648566, 0.08651209, 0.06357183, 0.10819222, 0.07386495, 0.03245554, 0.05430668, 0.06572005, 0.03279859},   // ML/R
            {0.07842736, 0.07744888, 0.07201150, 0.06734457, 0.05002348, 0.08350204, 0.08207655, 0.11181914, 0.03756112, 0.07486004, 0.06533972, 0.07457344, 0.09781475, 0.02719742},   // OMC
            {0.06545375, 0.06145378, 0.10503536, 0.06421508, 0.07627526, 0.09232981, 0.07763931, 0.07001035, 0.11307331, 0.07298351, 0.04248486, 0.06462713, 0.07038293, 0.02403557},   // OML/R
            {0.07738289, 0.05022488, 0.07790481, 0.01356516, 0.01038191, 0.06495444, 0.07721954, 0.07701905, 0.02680715, 0.07759692, 0.12701687, 0.15378395, 0.12808992, 0.03805251},   // F
            {0.07466384, 0.07466384, 0.07466384, 0.14932769, 0.10452938, 0.14932769, 0.10452938, 0.10344411, 0.07512610, 0.04492581, 0.04479831, 0.0, 0.0, 0.0}	// GK
			};
        // REC weights
        private WeightMatrix _weightR = new double[,] {
            {0.653962303361921, 0.330014238020285, 0.562994547223387, 0.891800163983125, 0.871069095865164, 0.454514672470839, 0.555697278549252, 0.42777598627972, 0.338218821750765, 0.134348455965202, 0.796916786677566, 0.048831870932616, 0.116363443378865, 0.282347752982916},  //DC
            {0.565605120229193, 0.430973382039533, 0.917125432457378, 0.815702528287723, 0.99022325015212, 0.547995876625372, 0.522203232914265, 0.309928898819518, 0.837365352274204, 0.483822472259513, 0.656901420858592, 0.137582588344562, 0.163658117596413, 0.303915447383549},  //DL/R
            {0.55838825558912, 0.603683502357502, 0.563792314670998, 0.770425088563048, 0.641965853834719, 0.675495235675077, 0.683863478201805, 0.757342915150728, 0.473070797767482, 0.494107823556837, 0.397547163237438, 0.429660916538242, 0.56364174077388, 0.224791093448809},   //DMC
            {0.582074038075056, 0.420032202680124, 0.7887541874616, 0.726221389774063, 0.722972329840151, 0.737617252827595, 0.62234458453736, 0.466946909655194, 0.814382915598981, 0.561877829393632, 0.367446981999576, 0.360623408340649, 0.390057769678583, 0.249517737311268},    //DML/R
            {0.578431939417021, 0.778134685048085, 0.574726322388294, 0.71400292078636, 0.635403391007978, 0.822308254446722, 0.877857040588335, 0.864265671245476, 0.433450219618618, 0.697164252367046, 0.412568516841575, 0.586627586272733, 0.617905053049757, 0.308426814834866},  //MC
            {0.497429376361348, 0.545347364699553, 0.788280917110089, 0.578724574327427, 0.663235306043286, 0.772537143243647, 0.638706135095199, 0.538453108494387, 0.887935381275257, 0.572515970409641, 0.290549550901104, 0.476180499897665, 0.526149424898544, 0.287001645266184}, //ML/R
            {0.656437768926678, 0.617260722143117, 0.656569986958435, 0.63741054520629, 0.55148452726771, 0.922379789905246, 0.790553566121791, 0.999688557334153, 0.426203575603164, 0.778770912265944, 0.652374065121788, 0.662264393455567, 0.73120100926333, 0.274563618133769},    //OMC
            {0.483341947292063, 0.494773052635464, 0.799434804259974, 0.628789194186491, 0.633847969631333, 0.681354437033551, 0.671233869875345, 0.536121458625519, 0.849389745477645, 0.684067723274814, 0.389732973354501, 0.499972692291964, 0.577231818355874, 0.272773352088982}, //OML/R
            {0.493917051093473, 0.370423904816088, 0.532148929996192, 0.0629206658586336, 0.0904950078155216, 0.415494774080483, 0.54106107545574, 0.468181146095801, 0.158106484131194, 0.461125738338018, 0.83399612271067, 0.999828328674183, 0.827171977606305, 0.253225855459207}, //F
            {0.5, 0.333, 0.5, 1, 0.5, 1, 0.5, 0.5, 0.333, 0.333, 0.333, 0.0, 0.0, 0.0} //GK
			};
        //	{DC, DL/R, DMC, DML/R, MC, ML/R, OMC, OML/R, F, GK}
        private WeightMatrix _recLast = new double[,] {
            {14.866375, 15.980742, 15.8932675, 15.5835325, 17.6955092, 16.6189141, 18.1255351, 15.6304867, 13.2762119, 15},
            {18.95664, 22.895539, 23.1801296, 23.2813871, 26.8420884, 23.9940623, 27.8974544, 24.54323, 19.5088591, 22.3}
            };
        //  {DC, DL, DR, DMC, DML, DMR, MC, ML, MR, OMC, OML, OMR, F}
        private WeightMatrix positionsAll = new double[,] {
            {0, 2, 2, 1, 3, 3, 2, 4, 4, 3, 4, 4, 4},    // D C
            {2, 0, 1, 3, 1, 2, 4, 2, 3, 4, 3, 4, 4},    // D L
            {2, 1, 0, 3, 2, 1, 4, 3, 2, 4, 4, 3, 4},    // D R
            {1, 3, 3, 0, 2, 2, 1, 3, 3, 2, 4, 4, 3},    // DM C
            {3, 1, 2, 2, 0, 1, 3, 1, 2, 4, 2, 3, 4},    // DM L
            {3, 2, 1, 2, 1, 0, 3, 2, 1, 4, 3, 2, 4},    // DM R
            {2, 4, 4, 1, 3, 3, 0, 2, 2, 1, 3, 3, 2},    // M C
            {4, 2, 3, 3, 1, 2, 2, 0, 1, 3, 1, 2, 4},    // M L
            {4, 3, 2, 3, 2, 1, 2, 1, 0, 3, 2, 1, 4},    // M R
            {3, 4, 4, 2, 4, 4, 1, 3, 3, 0, 2, 2, 1},    // OM C
            {4, 3, 4, 4, 2, 3, 3, 1, 2, 2, 0, 1, 3},    // OM L
            {4, 4, 3, 4, 3, 2, 3, 2, 1, 2, 1, 0, 3},    // OM R
            {4, 4, 4, 3, 4, 4, 2, 4, 4, 1, 3, 3, 0}	// F
			};

        public static void TestRating()
        {
            PlayerDataSkills pds = PlayerDataSkills.From(
                new PlayerData()
                {
                    Ada = 0,
                    ASI = new Common.intvar(40682,40682),
                    FPn = 33,
                    Rou = 15.8M,
                    Skills = new decvar[]
                    {
                        new decvar(11,11),
                        new decvar(13,13),
                        new decvar(14,14),
                        new decvar(15,15),
                        new decvar(17,17),
                        new decvar(15,15),
                        new decvar(14,14),
                        new decvar(15,15),
                        new decvar(19,19),
                        new decvar(10,10),
                        new decvar(9,9),
                        new decvar(11,11),
                        new decvar(7,7),
                        new decvar(18,18),
                    },
                    SPn = 12,
                });

            RatingR4 R4 = new RatingR4();

            Rating res = R4.ComputeRating(pds);
        }

        public double funFix1(double i)
        {
            // i = (Math.Round(i * 10) / 10.0);
            return i;
        }

        public double funFix2(double i)
        {
            // i = (Math.Round(i * 100) / 100.0);
            return i;
        }

		public double funFix3(double i)
		{
			// i = (Math.Round(i * 100) / 100.0);
			return i;
		}

		private double MP(double v1, double v2)
		{
			return Math.Pow(v1, v2);
		}

		private double MR(double v1)
		{
			return Math.Round(v1);
		}

		private double MF(double v1)
		{
			return Math.Floor(v1);
		}

		private double ML(double v1)
		{
			return Math.Log(v1);
		}

		public override Rating ComputeRating(PlayerDataSkills playerData)
		{
			var rou = playerData.Rou;
			int SI = playerData.ASI;
			var MathLogE = 1.4426950408889634;

			var FPn = playerData.FPn;
			var isGK = (FPn == 0);
			int[] positionIndices = Rating.GetPositionIndex(FPn);
			var positionArray = positionIndices[1] != -1 ? new int[] { positionIndices[0], positionIndices[1] } :
				new[] { positionIndices[0] };
			var FP = positionIndices[1] != -1 ? new int[] { positionIndices[0], positionIndices[1] } :
				new[] { positionIndices[0] };
			double[] REREC2 = new double[FP.Length];
			double[][] REREC = null;

			var rou2 = (3.0 / 100.0) * (100.0 - (100.0) * MP(Math.E, -rou * 0.035));
			var rou3 = rou;
			rou = MP(5.0 / 3.0, MathLogE * ML(rou * 10.0));

			double[] skills = new double[14];
			playerData.Skills.CopyTo(skills, 0);

			for (int i = 0; i < positionArray.Length; i++)
			{
				var positionIndex = positionArray[i];

				if (positionIndex > -1)
				{
					REREC2[i] = calculateREREC2(positionIndex, skills, SI);
				}
				if (i == 0)
					REREC = calculateREREC(positionIndex, skills, SI, rou2);
			}

			bool notGK = !isGK;

			var phySum = 0.0;
			var tacSum = 0.0;
			var tecSum = 0.0;
			double weight = 0.0;

			if (notGK)
			{
				phySum = skills[0] * 1 + skills[1] * 1 + skills[2] * 1 + skills[10] * 1;
				tacSum = skills[3] * 1 + skills[4] * 1 + skills[5] * 1 + skills[6] * 1;
				tecSum = skills[7] * 1 + skills[8] * 1 + skills[9] * 1 + skills[11] * 1 + skills[12] * 1 + skills[13] * 1;
				weight = 263533760000;
			}
			else
			{
				phySum = skills[0] * 1 + skills[1] * 1 + skills[2] * 1 + skills[7] * 1;
				tacSum = skills[4] * 1 + skills[6] * 1 + skills[8] * 1;
				tecSum = skills[3] * 1 + skills[5] * 1 + skills[9] * 1 + skills[10] * 1;
				weight = 48717927500;
			}
			var allSum = phySum + tacSum + tecSum;
			var remainder = funFix1(MP(2.0, ML(weight * SI) / ML(MP(2.0, 7.0))) - allSum);

			var FP2 = (FP.Length == 1) ? new int[] { FP[0], -1 } : new int[] { FP[0], FP[1] };

			for (int i = 0; i < FP.Length; i++)
			{
				for (int j = 0; 2 + j <= FP[i]; j += 2)
					FP[i]--;
			}

			var goldstar = 0;
			var skillsB = new double[skills.Length];

			for (int j = 0; j < 2; j++)
			{
				for (int i = 0; i < skills.Length; i++)
				{
					if (j == 0 && skills[i] == 20) goldstar++;
					if (j == 1)
					{
						if (skills[i] != 20) skillsB[i] = skills[i] * 1 + remainder / (skills.Length - goldstar);
						else skillsB[i] = skills[i];
					}
				}
			}
			var skillsB_rou = new double[skills.Length];
			for (int i = 0; i < skills.Length; i++)
			{
				if (i == 1) skillsB_rou[1] = skillsB[1];
				else skillsB_rou[i] = skillsB[i] * 1 + rou2;
			}


			(int ageMonths, int months, int year) = calc_age(playerData);

			(double sellToAgentPrice, double maxPrice) = calc_SellToAgent(playerData);
			(double weight_out, double session, int newPlayer, double TI, double session2, double wage) = calc_TI(playerData);
			(double R5FP0, double R5FP1, double[] posGain, double[] posKeep, double headerBonus, double ckBonus, double fkBonus, double pkBonus, double allBonus) = calc_R5bonus(skillsB_rou, skills, REREC, FP, isGK);
			(double bep, double futureSTA) = bep_function(newPlayer, notGK, session, allSum, TI, remainder,
				ageMonths, wage, months);
			(double shotregular, double shotlong, double shothead) = finish_type(skillsB, rou2);
			(double[] R5FP, double[][] minR) = calc_stamina_effect(skills, FP, isGK, R5FP0, R5FP1, positionArray);
			(double[] peak, double[] R5RECstar) = calc_R5REC(notGK, phySum, tacSum, tecSum, rou2, skills);
			(double[] R5all, double minR5Value, double maxR5Value, double minR5Value2, double maxR5Value2, double[] R5Value, double[] R5Value2) = 
				calc_VALUE(rou3, ageMonths, R5FP0, R5FP1, FP, REREC, notGK, SI, allSum, session, months, year, newPlayer,
				TI, session2, sellToAgentPrice, playerData);
			(double[] cap, double[] cap3, string weightDefault, double[] cap2) = calc_captaincy(playerData, rou3);

			weight = weight_out;
			// skillsB_rou sono le skill modificate comprensive della routine

			//	### infotable #################################################################################

			double[] RERECb;
			double[] R5;

			if (FP.Length > 1)
			{
				RERECb = new double[] { REREC[0][FP[0]], REREC[0][FP[1]] };
				R5 = new double[] { R5FP0, R5FP1 };
			}
			else
			{
				RERECb = new double[] { REREC[0][FP[0]] };
				R5 = new double[] { R5FP0 };
			}

			if (newPlayer == 0)
			{
				var seasonTI = TI;
				var averageTI = funFix1(TI / session);
			}
			else
			{
				if (wage != 30000)
				{
					wage_rate = 23.75;
					var TI2 = MP(2, ML(weight * SI) / ML(MP(2, 7))) - MP(2, ML(weight * wage / (wage_rate)) / ML(MP(2, 7)));
					var newPlayerTI = MR(TI2 * 10);
				}
			}

			// R5table0 ###############################################################################
			var R5pure_row = new double[2];
			var RouEffect_row = new double[2];
			var gain_row = new double[2];
			var keep_row = new double[2];
			var headerbonus_row = new double[2];
			var ckbonus_row = new double[2];
			var fkbonus_row = new double[2];
			var pkbonus_row = new double[2];
			var R5stamina_row = new double[2, 5];
			var R5ave_row = new double[2, 4];

			for (int i = 0; i < positionArray.Length; i++)
			{
				R5stamina_row[i, 1] = minR[i][1];
				R5stamina_row[i, 2] = minR[i][2];
				R5stamina_row[i, 3] = minR[i][3];
				R5stamina_row[i, 4] = minR[i][4];

				R5ave_row[i, 1] = funFix2((R5FP[i] * 64 + minR[i][1] * 10) / 74);
				R5ave_row[i, 2] = funFix2((R5FP[i] * 64 + minR[i][1] * 10 + minR[i][2] * 10) / 84);
				R5ave_row[i, 3] = funFix2((R5FP[i] * 64 + minR[i][1] * 10 + minR[i][2] * 10 + minR[i][3] * 10) / 94);

				R5pure_row[i] = REREC[1][FP[i]];

				RouEffect_row[i] = funFix2(REREC[2][FP[i]] * 1 - REREC[1][FP[i]] * 1);

				if (FP[i] < 9)
				{
					gain_row[i] = funFix2(posGain[FP[i]]);
					keep_row[i] = funFix2(posKeep[FP[i]]);
				}
				headerbonus_row[i] = headerBonus;
				ckbonus_row[i] = ckBonus;
				fkbonus_row[i] = fkBonus;
				pkbonus_row[i] = pkBonus;
			}

			double[] R5adapt = null;
			double[] RERECadapt = null;

			if (notGK) {
				R5adapt = new double[13];
				RERECadapt = new double[13];

				for (int i = 0; i < 9; i++) {
					REREC[0][i] = funFix3(REREC[0][i] * 1);
					REREC[2][i] = funFix2(REREC[2][i] * 1 + allBonus * 1 + posGain[i] * 1 + posKeep[i] * 1);
					if (REREC[2][i] >= 100) REREC[2][i] = funFix1(REREC[2][i]);
				}

				// RatingR5 by attacking style
				var ADir = funFix2((skillsB_rou[1] * 0.125 + skillsB_rou[2] * 0.29166666 + (skillsB_rou[5] + skillsB_rou[6]) * 0.08333333 + skillsB_rou[7] * 0.25 + skillsB_rou[9] * 0.16666666) * 5);
				var AWin = funFix2((skillsB_rou[0] * 0.04347826 + (skillsB_rou[1] + skillsB_rou[5]) * 0.08695652 + skillsB_rou[2] * 0.26086956 + skillsB_rou[8] * 0.34782608 + skillsB_rou[9] * 0.17391304) * 5);
				var ASho = funFix2(((skillsB_rou[1] + skillsB_rou[2] + skillsB_rou[5] + skillsB_rou[6]) * 0.09523809 + skillsB_rou[7] * 0.33333333 + skillsB_rou[9] * 0.28571428) * 5);
				var ALon = funFix2(((skillsB_rou[1] + skillsB_rou[5] + skillsB_rou[6]) * 0.08333333 + skillsB_rou[7] * 0.33333333 + skillsB_rou[8] * 0.25 + skillsB_rou[9] * 0.16666666) * 5);
				var AThr = funFix2(((skillsB_rou[1] + skillsB_rou[5] + skillsB_rou[6] + skillsB_rou[8] + skillsB_rou[9]) * 0.1 + (skillsB_rou[2] + skillsB_rou[7]) * 0.25) * 5);
				var DDir = funFix2((skillsB_rou[1] * 0.052631579 + (skillsB_rou[2] + skillsB_rou[6]) * 0.105263158 + skillsB_rou[3] * 0.421052632 + (skillsB_rou[4] + skillsB_rou[5]) * 0.157894737) * 5);
				var DWin = funFix2(((skillsB_rou[0] + skillsB_rou[1] + skillsB_rou[5] + skillsB_rou[6]) * 0.045454545 + (skillsB_rou[2] + skillsB_rou[3]) * 0.227272727 + skillsB_rou[4] * 0.363636364) * 5);
				var DSho = funFix2(((skillsB_rou[1] + skillsB_rou[2]) * 0.05 + skillsB_rou[3] * 0.25 + skillsB_rou[4] * 0.4 + skillsB_rou[5] * 0.1 + skillsB_rou[6] * 0.15) * 5);
				var DLon = funFix2(((skillsB_rou[0] + skillsB_rou[3] + skillsB_rou[10]) * 0.2 + skillsB_rou[1] * 0.04 + (skillsB_rou[2] + skillsB_rou[5] + skillsB_rou[6]) * 0.08 + skillsB_rou[4] * 0.12) * 5);
				var DThr = funFix2(((skillsB_rou[1] + skillsB_rou[5] + skillsB_rou[6]) * 0.071428571 + skillsB_rou[2] * 0.357142857 + (skillsB_rou[3] + skillsB_rou[4]) * 0.214285714) * 5);

				var SSho = funFix2((shotregular * 0.534 + shotlong * 0.339 + shothead * 0.127) * 5);
				var SThr = funFix2((shotregular * 0.703 + shotlong * 0.151 + shothead * 0.146) * 5);
				var SWin = funFix2((shotregular * 0.252 + shotlong * 0.035 + shothead * 0.713) * 5);
				var SDir = funFix2((shotregular * 0.339 + shotlong * 0.342 + shothead * 0.319) * 5);
				var SLon = funFix2((shotregular * 0.271 + shotlong * 0.037 + shothead * 0.692) * 5);

				double[] RERECb_Vect = new double[9];
				double[] R5_Vect = new double[9];

				for (int i = 0; i < 9; i++) {
					RERECb_Vect[i] = REREC[0][i];
					R5_Vect[i] = REREC[2][i];
				}


				// R5table10 ##########################################################################
				var R5AS = new double[9];
				var R5AT = new double[9];
				var R5AW = new double[9];
				var R5AD = new double[9];
				var R5AL = new double[9];
				var R5AB = new double[9];
				var R5AS2 = new double[9];
				var R5AT2 = new double[9];
				var R5AW2 = new double[9];
				var R5AD2 = new double[9];
				var R5AL2 = new double[9];
				var R5AB2 = new double[9];
				var R5DS = new double[9];
				var R5DT = new double[9];
				var R5DW = new double[9];
				var R5DD = new double[9];
				var R5DL = new double[9];
				var R5DB = new double[9];
				var R5DS2 = new double[9];
				var R5DT2 = new double[9];
				var R5DW2 = new double[9];
				var R5DD2 = new double[9];
				var R5DL2 = new double[9];
				var R5DB2 = new double[9];
				double[] sB = skillsB_rou;
				WeightMatrix wAS = WeightASho;
				WeightMatrix wAS2 = WeightASho2;
				WeightMatrix wAT = WeightAThr;
				WeightMatrix wAT2 = WeightAThr2;
				WeightMatrix wAW = WeightAWin;
				WeightMatrix wAW2 = WeightAWin2;
				WeightMatrix wAD = WeightADir;
				WeightMatrix wAD2 = WeightADir2;
				WeightMatrix wAL = WeightALon;
				WeightMatrix wAL2 = WeightALon2;
				WeightMatrix wAB = WeightABal;
				WeightMatrix wAB2 = WeightABal2;
				WeightMatrix wDS = WeightDSho;
				WeightMatrix wDS2 = WeightDSho2;
				WeightMatrix wDT = WeightDThr;
				WeightMatrix wDT2 = WeightDThr2;
				WeightMatrix wDW = WeightDWin;
				WeightMatrix wDW2 = WeightDWin2;
				WeightMatrix wDD = WeightDDir;
				WeightMatrix wDD2 = WeightDDir2;
				WeightMatrix wDL = WeightDLon;
				WeightMatrix wDL2 = WeightDLon2;
				WeightMatrix wDB = WeightDBal;
				WeightMatrix wDB2 = WeightDBal2;

				for (int i = 0; i < 9; i++) {
					R5AS[i] = funFix2((sB[0] * wAS[i, 0] + sB[1] * wAS[i, 1] + sB[2] * wAS[i, 2] + sB[5] * wAS[i, 5] + sB[6] * wAS[i, 6] + sB[7] * wAS[i, 7] + sB[8] * wAS[i, 8] + sB[9] * wAS[i, 9]) * 5);
					R5AT[i] = funFix2((sB[0] * wAT[i, 0] + sB[1] * wAT[i, 1] + sB[2] * wAT[i, 2] + sB[5] * wAT[i, 5] + sB[6] * wAT[i, 6] + sB[7] * wAT[i, 7] + sB[8] * wAT[i, 8] + sB[9] * wAT[i, 9]) * 5);
					R5AW[i] = funFix2((sB[0] * wAW[i, 0] + sB[1] * wAW[i, 1] + sB[2] * wAW[i, 2] + sB[5] * wAW[i, 5] + sB[6] * wAW[i, 6] + sB[7] * wAW[i, 7] + sB[8] * wAW[i, 8] + sB[9] * wAW[i, 9]) * 5);
					R5AD[i] = funFix2((sB[0] * wAD[i, 0] + sB[1] * wAD[i, 1] + sB[2] * wAD[i, 2] + sB[5] * wAD[i, 5] + sB[6] * wAD[i, 6] + sB[7] * wAD[i, 7] + sB[8] * wAD[i, 8] + sB[9] * wAD[i, 9]) * 5);
					R5AL[i] = funFix2((sB[0] * wAL[i, 0] + sB[1] * wAL[i, 1] + sB[2] * wAL[i, 2] + sB[5] * wAL[i, 5] + sB[6] * wAL[i, 6] + sB[7] * wAL[i, 7] + sB[8] * wAL[i, 8] + sB[9] * wAL[i, 9]) * 5);
					R5AB[i] = funFix2((sB[0] * wAB[i, 0] + sB[1] * wAB[i, 1] + sB[2] * wAB[i, 2] + sB[5] * wAB[i, 5] + sB[6] * wAB[i, 6] + sB[7] * wAB[i, 7] + sB[8] * wAB[i, 8] + sB[9] * wAB[i, 9]) * 5);
					R5DS[i] = funFix2((sB[0] * wDS[i, 0] + sB[1] * wDS[i, 1] + sB[2] * wDS[i, 2] + sB[3] * wDS[i, 3] + sB[4] * wDS[i, 4] + sB[5] * wDS[i, 5] + sB[6] * wDS[i, 6] + sB[10] * wDS[i, 10]) * 5);
					R5DT[i] = funFix2((sB[0] * wDT[i, 0] + sB[1] * wDT[i, 1] + sB[2] * wDT[i, 2] + sB[3] * wDT[i, 3] + sB[4] * wDT[i, 4] + sB[5] * wDT[i, 5] + sB[6] * wDT[i, 6] + sB[10] * wDT[i, 10]) * 5);
					R5DW[i] = funFix2((sB[0] * wDW[i, 0] + sB[1] * wDW[i, 1] + sB[2] * wDW[i, 2] + sB[3] * wDW[i, 3] + sB[4] * wDW[i, 4] + sB[5] * wDW[i, 5] + sB[6] * wDW[i, 6] + sB[10] * wDW[i, 10]) * 5);
					R5DD[i] = funFix2((sB[0] * wDD[i, 0] + sB[1] * wDD[i, 1] + sB[2] * wDD[i, 2] + sB[3] * wDD[i, 3] + sB[4] * wDD[i, 4] + sB[5] * wDD[i, 5] + sB[6] * wDD[i, 6] + sB[10] * wDD[i, 10]) * 5);
					R5DL[i] = funFix2((sB[0] * wDL[i, 0] + sB[1] * wDL[i, 1] + sB[2] * wDL[i, 2] + sB[3] * wDL[i, 3] + sB[4] * wDL[i, 4] + sB[5] * wDL[i, 5] + sB[6] * wDL[i, 6] + sB[10] * wDL[i, 10]) * 5);
					R5DB[i] = funFix2((sB[0] * wDB[i, 0] + sB[1] * wDB[i, 1] + sB[2] * wDB[i, 2] + sB[3] * wDB[i, 3] + sB[4] * wDB[i, 4] + sB[5] * wDB[i, 5] + sB[6] * wDB[i, 6] + sB[10] * wDB[i, 10]) * 5);
					R5AS2[i] = funFix2((sB[0] * wAS2[i, 0] + sB[1] * wAS2[i, 1] + sB[2] * wAS2[i, 2] + sB[5] * wAS2[i, 5] + sB[6] * wAS2[i, 6] + sB[7] * wAS2[i, 7] + sB[8] * wAS2[i, 8] + sB[9] * wAS2[i, 9]) * 5);
					R5AT2[i] = funFix2((sB[0] * wAT2[i, 0] + sB[1] * wAT2[i, 1] + sB[2] * wAT2[i, 2] + sB[5] * wAT2[i, 5] + sB[6] * wAT2[i, 6] + sB[7] * wAT2[i, 7] + sB[8] * wAT2[i, 8] + sB[9] * wAT2[i, 9]) * 5);
					R5AW2[i] = funFix2((sB[0] * wAW2[i, 0] + sB[1] * wAW2[i, 1] + sB[2] * wAW2[i, 2] + sB[5] * wAW2[i, 5] + sB[6] * wAW2[i, 6] + sB[7] * wAW2[i, 7] + sB[8] * wAW2[i, 8] + sB[9] * wAW2[i, 9]) * 5);
					R5AD2[i] = funFix2((sB[0] * wAD2[i, 0] + sB[1] * wAD2[i, 1] + sB[2] * wAD2[i, 2] + sB[5] * wAD2[i, 5] + sB[6] * wAD2[i, 6] + sB[7] * wAD2[i, 7] + sB[8] * wAD2[i, 8] + sB[9] * wAD2[i, 9]) * 5);
					R5AL2[i] = funFix2((sB[0] * wAL2[i, 0] + sB[1] * wAL2[i, 1] + sB[2] * wAL2[i, 2] + sB[5] * wAL2[i, 5] + sB[6] * wAL2[i, 6] + sB[7] * wAL2[i, 7] + sB[8] * wAL2[i, 8] + sB[9] * wAL2[i, 9]) * 5);
					R5AB2[i] = funFix2((sB[0] * wAB2[i, 0] + sB[1] * wAB2[i, 1] + sB[2] * wAB2[i, 2] + sB[5] * wAB2[i, 5] + sB[6] * wAB2[i, 6] + sB[7] * wAB2[i, 7] + sB[8] * wAB2[i, 8] + sB[9] * wAB2[i, 9]) * 5);
					R5DS2[i] = funFix2((sB[0] * wDS2[i, 0] + sB[1] * wDS2[i, 1] + sB[2] * wDS2[i, 2] + sB[3] * wDS2[i, 3] + sB[4] * wDS2[i, 4] + sB[5] * wDS2[i, 5] + sB[6] * wDS2[i, 6] + sB[10] * wDS2[i, 10]) * 5);
					R5DT2[i] = funFix2((sB[0] * wDT2[i, 0] + sB[1] * wDT2[i, 1] + sB[2] * wDT2[i, 2] + sB[3] * wDT2[i, 3] + sB[4] * wDT2[i, 4] + sB[5] * wDT2[i, 5] + sB[6] * wDT2[i, 6] + sB[10] * wDT2[i, 10]) * 5);
					R5DW2[i] = funFix2((sB[0] * wDW2[i, 0] + sB[1] * wDW2[i, 1] + sB[2] * wDW2[i, 2] + sB[3] * wDW2[i, 3] + sB[4] * wDW2[i, 4] + sB[5] * wDW2[i, 5] + sB[6] * wDW2[i, 6] + sB[10] * wDW2[i, 10]) * 5);
					R5DD2[i] = funFix2((sB[0] * wDD2[i, 0] + sB[1] * wDD2[i, 1] + sB[2] * wDD2[i, 2] + sB[3] * wDD2[i, 3] + sB[4] * wDD2[i, 4] + sB[5] * wDD2[i, 5] + sB[6] * wDD2[i, 6] + sB[10] * wDD2[i, 10]) * 5);
					R5DL2[i] = funFix2((sB[0] * wDL2[i, 0] + sB[1] * wDL2[i, 1] + sB[2] * wDL2[i, 2] + sB[3] * wDL2[i, 3] + sB[4] * wDL2[i, 4] + sB[5] * wDL2[i, 5] + sB[6] * wDL2[i, 6] + sB[10] * wDL2[i, 10]) * 5);
					R5DB2[i] = funFix2((sB[0] * wDB2[i, 0] + sB[1] * wDB2[i, 1] + sB[2] * wDB2[i, 2] + sB[3] * wDB2[i, 3] + sB[4] * wDB2[i, 4] + sB[5] * wDB2[i, 5] + sB[6] * wDB2[i, 6] + sB[10] * wDB2[i, 10]) * 5);
				}

				var R5Assist_ShoAll  = new double[] { R5AS[0], R5AS[1], R5AS[1], R5AS[2], R5AS[3], R5AS[3], R5AS[4], R5AS[5], R5AS[5], R5AS[6], R5AS[7], R5AS[7], R5AS[8] };
				var R5Assist_ThrAll  = new double[] { R5AT[0], R5AT[1], R5AT[1], R5AT[2], R5AT[3], R5AT[3], R5AT[4], R5AT[5], R5AT[5], R5AT[6], R5AT[7], R5AT[7], R5AT[8] };
				var R5Assist_WinAll  = new double[] { R5AW[0], R5AW[1], R5AW[1], R5AW[2], R5AW[3], R5AW[3], R5AW[4], R5AW[5], R5AW[5], R5AW[6], R5AW[7], R5AW[7], R5AW[8] };
				var R5Assist_DirAll  = new double[] { R5AD[0], R5AD[1], R5AD[1], R5AD[2], R5AD[3], R5AD[3], R5AD[4], R5AD[5], R5AD[5], R5AD[6], R5AD[7], R5AD[7], R5AD[8] };
				var R5Assist_LonAll  = new double[] { R5AL[0], R5AL[1], R5AL[1], R5AL[2], R5AL[3], R5AL[3], R5AL[4], R5AL[5], R5AL[5], R5AL[6], R5AL[7], R5AL[7], R5AL[8] };
				var R5Assist_BalAll  = new double[] { R5AB[0], R5AB[1], R5AB[1], R5AB[2], R5AB[3], R5AB[3], R5AB[4], R5AB[5], R5AB[5], R5AB[6], R5AB[7], R5AB[7], R5AB[8] };
				var R5Defence_ShoAll = new double[] { R5DS[0], R5DS[1], R5DS[1], R5DS[2], R5DS[3], R5DS[3], R5DS[4], R5DS[5], R5DS[5], R5DS[6], R5DS[7], R5DS[7], R5DS[8] };
				var R5Defence_ThrAll = new double[] { R5DT[0], R5DT[1], R5DT[1], R5DT[2], R5DT[3], R5DT[3], R5DT[4], R5DT[5], R5DT[5], R5DT[6], R5DT[7], R5DT[7], R5DT[8] };
				var R5Defence_WinAll = new double[] { R5DW[0], R5DW[1], R5DW[1], R5DW[2], R5DW[3], R5DW[3], R5DW[4], R5DW[5], R5DW[5], R5DW[6], R5DW[7], R5DW[7], R5DW[8] };
				var R5Defence_DirAll = new double[] { R5DD[0], R5DD[1], R5DD[1], R5DD[2], R5DD[3], R5DD[3], R5DD[4], R5DD[5], R5DD[5], R5DD[6], R5DD[7], R5DD[7], R5DD[8] };
				var R5Defence_LonAll = new double[] { R5DL[0], R5DL[1], R5DL[1], R5DL[2], R5DL[3], R5DL[3], R5DL[4], R5DL[5], R5DL[5], R5DL[6], R5DL[7], R5DL[7], R5DL[8] };
				var R5Defence_BalAll = new double[] { R5DB[0], R5DB[1], R5DB[1], R5DB[2], R5DB[3], R5DB[3], R5DB[4], R5DB[5], R5DB[5], R5DB[6], R5DB[7], R5DB[7], R5DB[8] };
				var R5Assist_Sho2All  = new double[] { R5AS2[0], R5AS2[1], R5AS2[1], R5AS2[2], R5AS2[3], R5AS2[3], R5AS2[4], R5AS2[5], R5AS2[5], R5AS2[6], R5AS2[7], R5AS2[7], R5AS2[8] };
				var R5Assist_Thr2All  = new double[] { R5AT2[0], R5AT2[1], R5AT2[1], R5AT2[2], R5AT2[3], R5AT2[3], R5AT2[4], R5AT2[5], R5AT2[5], R5AT2[6], R5AT2[7], R5AT2[7], R5AT2[8] };
				var R5Assist_Win2All  = new double[] { R5AW2[0], R5AW2[1], R5AW2[1], R5AW2[2], R5AW2[3], R5AW2[3], R5AW2[4], R5AW2[5], R5AW2[5], R5AW2[6], R5AW2[7], R5AW2[7], R5AW2[8] };
				var R5Assist_Dir2All  = new double[] { R5AD2[0], R5AD2[1], R5AD2[1], R5AD2[2], R5AD2[3], R5AD2[3], R5AD2[4], R5AD2[5], R5AD2[5], R5AD2[6], R5AD2[7], R5AD2[7], R5AD2[8] };
				var R5Assist_Lon2All  = new double[] { R5AL2[0], R5AL2[1], R5AL2[1], R5AL2[2], R5AL2[3], R5AL2[3], R5AL2[4], R5AL2[5], R5AL2[5], R5AL2[6], R5AL2[7], R5AL2[7], R5AL2[8] };
				var R5Assist_Bal2All  = new double[] { R5AB2[0], R5AB2[1], R5AB2[1], R5AB2[2], R5AB2[3], R5AB2[3], R5AB2[4], R5AB2[5], R5AB2[5], R5AB2[6], R5AB2[7], R5AB2[7], R5AB2[8] };
				var R5Defence_Sho2All = new double[] { R5DS2[0], R5DS2[1], R5DS2[1], R5DS2[2], R5DS2[3], R5DS2[3], R5DS2[4], R5DS2[5], R5DS2[5], R5DS2[6], R5DS2[7], R5DS2[7], R5DS2[8] };
				var R5Defence_Thr2All = new double[] { R5DT2[0], R5DT2[1], R5DT2[1], R5DT2[2], R5DT2[3], R5DT2[3], R5DT2[4], R5DT2[5], R5DT2[5], R5DT2[6], R5DT2[7], R5DT2[7], R5DT2[8] };
				var R5Defence_Win2All = new double[] { R5DW2[0], R5DW2[1], R5DW2[1], R5DW2[2], R5DW2[3], R5DW2[3], R5DW2[4], R5DW2[5], R5DW2[5], R5DW2[6], R5DW2[7], R5DW2[7], R5DW2[8] };
				var R5Defence_Dir2All = new double[] { R5DD2[0], R5DD2[1], R5DD2[1], R5DD2[2], R5DD2[3], R5DD2[3], R5DD2[4], R5DD2[5], R5DD2[5], R5DD2[6], R5DD2[7], R5DD2[7], R5DD2[8] };
				var R5Defence_Lon2All = new double[] { R5DL2[0], R5DL2[1], R5DL2[1], R5DL2[2], R5DL2[3], R5DL2[3], R5DL2[4], R5DL2[5], R5DL2[5], R5DL2[6], R5DL2[7], R5DL2[7], R5DL2[8] };
				var R5Defence_Bal2All = new double[] { R5DB2[0], R5DB2[1], R5DB2[1], R5DB2[2], R5DB2[3], R5DB2[3], R5DB2[4], R5DB2[5], R5DB2[5], R5DB2[6], R5DB2[7], R5DB2[7], R5DB2[8] };
				var posGainAll = new double[] { posGain[0], posGain[1], posGain[1], posGain[2], posGain[3], posGain[3], posGain[4], posGain[5], posGain[5], posGain[6], posGain[7], posGain[7], posGain[8] };
				var posKeepAll = new double[] { posKeep[0], posKeep[1], posKeep[1], posKeep[2], posKeep[3], posKeep[3], posKeep[4], posKeep[5], posKeep[5], posKeep[6], posKeep[7], posKeep[7], posKeep[8] };
				var RERECall = new double[] { REREC[0][0], REREC[0][1], REREC[0][1], REREC[0][2], REREC[0][3], REREC[0][3], REREC[0][4], REREC[0][5], REREC[0][5], REREC[0][6], REREC[0][7], REREC[0][7], REREC[0][8] };

				// Valori di R5 che tengono conto dell'adattabilità
				double adap = RatingFunctionAdaptability;
				if (playerData.Ada != 0)
					adap = playerData.Ada;

				for (int i = 0; i < 13; i++) {
					if ((FP2[1] != -1) && (positionsAll[FP2[0], i] > positionsAll[FP2[1], i]))
						positionsAll[FP2[0], i] = positionsAll[FP2[1], i];
					R5adapt[i] = funFix2((R5all[i] * 1 + allBonus * 1 + posGainAll[i] * 1 + posKeepAll[i] * 1) * (1 - (20.0 - adap) * positionsAll[FP2[0], i] / 200.0));
					RERECadapt[i] = funFix2(RERECall[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Assist_ShoAll[i] = funFix2(R5Assist_ShoAll[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Assist_ThrAll[i] = funFix2(R5Assist_ThrAll[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Assist_WinAll[i] = funFix2(R5Assist_WinAll[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Assist_DirAll[i] = funFix2(R5Assist_DirAll[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Assist_LonAll[i] = funFix2(R5Assist_LonAll[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Assist_BalAll[i] = funFix2(R5Assist_BalAll[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Defence_ShoAll[i] = funFix2(R5Defence_ShoAll[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Defence_ThrAll[i] = funFix2(R5Defence_ThrAll[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Defence_WinAll[i] = funFix2(R5Defence_WinAll[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Defence_DirAll[i] = funFix2(R5Defence_DirAll[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Defence_LonAll[i] = funFix2(R5Defence_LonAll[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Defence_BalAll[i] = funFix2(R5Defence_BalAll[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Assist_Sho2All[i] = funFix2(R5Assist_Sho2All[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Assist_Thr2All[i] = funFix2(R5Assist_Thr2All[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Assist_Win2All[i] = funFix2(R5Assist_Win2All[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Assist_Dir2All[i] = funFix2(R5Assist_Dir2All[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Assist_Lon2All[i] = funFix2(R5Assist_Lon2All[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Assist_Bal2All[i] = funFix2(R5Assist_Bal2All[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Defence_Sho2All[i] = funFix2(R5Defence_Sho2All[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Defence_Thr2All[i] = funFix2(R5Defence_Thr2All[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Defence_Win2All[i] = funFix2(R5Defence_Win2All[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Defence_Dir2All[i] = funFix2(R5Defence_Dir2All[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Defence_Lon2All[i] = funFix2(R5Defence_Lon2All[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
					R5Defence_Bal2All[i] = funFix2(R5Defence_Bal2All[i] * (1 - (20 - adap) * positionsAll[FP2[0], i] / 200));
				}
			}

			double CK = 0, FK = 0, PK = 0;

			if (notGK) {
				goldstar = 0;

				for (int j = 0; j < 2; j++) {
					for (int i = 0; i < 14; i++) {
						if (j == 0 && skills[i] == 20) goldstar++;
						if (j == 1 && skills[i] != 20) skills[i] = skills[i] * 1 + remainder / (14.0 - goldstar);
					}
				}
				CK = funFix2(skills[8] + skills[13] + skills[9] / 2 + rou2 * 2.5);
				FK = funFix2(skills[12] + skills[13] + skills[9] / 2 + rou2 * 2.5);
				PK = funFix2(skills[11] + skills[13] + skills[9] / 2 + rou2 * 2.5);

				var PHY = new { Sum = phySum, Avg = MR(phySum / peak[0] * 5.0) };
				var TAC = new { Sum = tacSum, Avg = MR(tacSum / peak[1] * 5.0) };
				var TEC = new { Sum = tecSum, Avg = MR(tecSum / peak[2] * 5.0) };
				var ALL = new { Sum = allSum, Rem = remainder };

				var FIN = new { Reg = shotregular, lon = shotlong, hea = shothead };

				var KICK = new { CK = CK, FK = FK, PK = PK };

				var RAT = new
				{
					Phy = R5RECstar[0],
					Tac = R5RECstar[1],
					Tec = R5RECstar[2],
					Ass = R5RECstar[3],
					Def = R5RECstar[4],
					Sho = R5RECstar[5]
				};
			}
			else {
				var PHY = new { Sum = phySum, Avg = MR(phySum / peak[0] * 5.0) };
				var TAC = new { Sum = tacSum, Avg = MR(tacSum / peak[1] * 5.0) };
				var TEC = new { Sum = tecSum, Avg = MR(tecSum / peak[2] * 5.0) };
				var ALL = new { Sum = allSum, Rem = remainder };

				var RAT = new
				{
					Phy = R5RECstar[0],
					Tac = R5RECstar[1],
					Tec = R5RECstar[2],
					Sav = R5RECstar[6],
					Cou = R5RECstar[7],
				};
			}

			double[] RECb = null;
			R5 = null;
			double[] R5r = null;

			if (!isGK)
			{
				RECb = new double[]
				{
					REREC[0][0], // 00: DC
                    REREC[0][1], // 01: DL
                    REREC[0][1], // 02: DR
                    REREC[0][2], // 03: DMC
                    REREC[0][3], // 04: DML
                    REREC[0][3], // 05: DMR
                    REREC[0][4], // 06: MC
                    REREC[0][5], // 07: ML
                    REREC[0][5], // 08: MR
                    REREC[0][6], // 09: OMC
                    REREC[0][7], // 10: OML
                    REREC[0][7], // 11: OMR
                    REREC[0][8], // 12: FC
                    0
				};

				R5 = new double[]
				{
					REREC[1][0], // 00: DC
                    REREC[1][1], // 01: DL
                    REREC[1][1], // 02: DR
                    REREC[1][2], // 03: DMC
                    REREC[1][3], // 04: DML
                    REREC[1][3], // 05: DMR
                    REREC[1][4], // 06: MC
                    REREC[1][5], // 07: ML
                    REREC[1][5], // 08: MR
                    REREC[1][6], // 09: OMC
                    REREC[1][7], // 10: OML
                    REREC[1][7], // 11: OMR
                    REREC[1][8], // 12: FC
                    0
				};

				R5r = new double[]
				{
					REREC[2][0], // 00: DC
                    REREC[2][1], // 01: DL
                    REREC[2][1], // 02: DR
                    REREC[2][2], // 03: DMC
                    REREC[2][3], // 04: DML
                    REREC[2][3], // 05: DMR
                    REREC[2][4], // 06: MC
                    REREC[2][5], // 07: ML
                    REREC[2][5], // 08: MR
                    REREC[2][6], // 09: OMC
                    REREC[2][7], // 10: OML
                    REREC[2][7], // 11: OMR
                    REREC[2][8], // 12: FC
                    0
				};
			}
			else
			{
				RECb = new double[]
				{
					0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					REREC[0][9], // 13: GK
                };

				R5 = new double[]
				{
					0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					REREC[1][9]  // 13: GK
                };

				R5r = new double[]
				{
					0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					REREC[2][9]  // 13: GK
                };
			}

			var R5Rating = new Rating
			{
				rec = (RERECadapt == null) ? RECb : RERECadapt,
				rating = R5,
				ratingR = (R5adapt == null) ? R5r : R5adapt,
				CK = CK,
				FK = FK,
				PK = PK,
			};

			R5Rating.OSi = GetOSi(R5Rating, playerData);

			return R5Rating;
		}


		(double[] cap, double[] cap3, string weightDefault, double[] cap2) calc_captaincy(PlayerDataSkills playerData, double rou3)
		{
			//	R5 Captaincy(RVA) Custom Weights
			//	Weights sum must be 1.0
			var leadWeight2 = 0.5;  // Leadership
			var profWeight2 = 0.25; // Professhionalism
			var rouWeight2 = 0.15;  // Routine
			var aggrWeight2 = 0.1;  // Aggression

			// WEIGHT(RVA's)
			var leadWeight = 0.5; // ## default Leadership weight 			DO NOT CHANGE
			var profWeight = 0.25; // ## default Professhionalism weight 		DO NOT CHANGE
			var rouWeight = 0.15; // ## default Routine weight 				DO NOT CHANGE
			var aggrWeight = 0.1; // ## default Aggression weight				DO NOT CHANGE

			string weightDefault;
			if (leadWeight2 == 0.5 && profWeight2 == 0.25 && rouWeight2 == 0.15 && aggrWeight2 == 0.1)
				weightDefault = "default";
			else
				weightDefault = "custom";

			var cap = new double[6];
			var cap2 = new double[6];
			var cap3 = new double[6];

			var prof = 0.0;
			var aggr = 0.0;
			if (playerData.Hidden != null)
			{
				prof = playerData.Hidden.Pro;
				aggr = playerData.Hidden.Agg;
			}

			for (int i = 1; i < 6; i++)
			{
				var leadWeight3 = new double[] { 0, 0.131578947, 0.421052632, 0.657894737, 0.815789474, 1 };
				if (leadWeight + profWeight + rouWeight + aggrWeight == 1)
					cap[i] = funFix2(i * leadWeight3[i] * 20 * leadWeight + prof * 5 * profWeight + rou3 * rouWeight + (100 - aggr * 5) * aggrWeight);
				else
					cap[i] = 0;

				if (leadWeight2 + profWeight2 + rouWeight2 + aggrWeight2 == 1)
					cap2[i] = funFix2(i * leadWeight3[i] * 20 * leadWeight2 + prof * 5 * profWeight2 + rou3 * rouWeight2 + (100 - aggr * 5) * aggrWeight2);
				else
					cap2[i] = 0;

				if (i * 4 + prof * 1 - aggr * 1 < 0)
					cap3[i] = 0;
				else
					cap3[i] = funFix2((i * 4 + prof * 1 - aggr * 1) / 39 * rou3);
			}
			return (cap, cap3, weightDefault, cap2);
		}

		(double[] peak, double[] R5RECstar) calc_R5REC(bool notGK, 
			double phySum,
			double tacSum,
			double tecSum,
			double rou2,
			double[] skills)
		{

			double[] peak;

			if (notGK)
				peak = new double[] { 4, 4, 6 };
			else
				peak = new double[] { 4, 3, 4 };

			var phyREC = funFix2((phySum / peak[0] + rou2) * 5 / 20);
			var tacREC = funFix2((tacSum / peak[1] + rou2) * 5 / 20);
			var tecREC = funFix2((tecSum / peak[2] + rou2) * 5 / 20);
			if (skills == null)
				return (null, null);

			var assistREC = funFix2((skills[0] * 0.01 + skills[1] * 0.1 + skills[2] * 0.2 + skills[5] * 0.09 + skills[6] * 0.07 + skills[7] * 0.22 + skills[8] * 0.13 + skills[9] * 0.18 + rou2) / 4);
			var defenceREC = funFix2((skills[0] * 0.121481481 + skills[1] * 0.040740741 + skills[2] * 0.111111111 + skills[3] * 0.202962963 + skills[4] * 0.2 + skills[5] * 0.071111111 + skills[6] * 0.071111111 + skills[10] * 0.181481481 + rou2) / 4);
			var shootingREC = funFix2((skills[0] * 0.082813522 + skills[2] * 0.038541421 + skills[5] * 0.087757535 + skills[6] * 0.126339391 + skills[9] * 0.104203341 + skills[10] * 0.104949572 + skills[11] * 0.301067794 + skills[12] * 0.154327424 + rou2) / 4);
			var savingREC = funFix2((skills[0] * 0.092691271 + skills[1] * 0.007577625 + skills[2] * 0.104277679 + skills[3] * 0.278073812 + skills[4] * 0.069518453 + skills[5] * 0.278073812 + skills[6] * 0.069518453 + skills[7] * 0.092691271 + skills[8] * 0.007577625 + rou2) / 4);
			var counterREC = funFix2((skills[0] * 0.046345635 + skills[1] * 0.003788813 + skills[2] * 0.052138840 + skills[3] * 0.139036906 + skills[4] * 0.034759226 + skills[5] * 0.139036906 + skills[6] * 0.034759226 + skills[7] * 0.046345635 + skills[8] * 0.003788813 + skills[9] * 0.25 + skills[10] * 0.25 + rou2) / 4);
			var R5REC = new double[] { phyREC, tacREC, tecREC, assistREC, defenceREC, shootingREC, savingREC, counterREC };

			return ( peak, R5REC );
		}

		(double[] R5FP, double[][] minR) calc_stamina_effect(double[] skills,
			int[] FP,
			bool isGK,
			double R5FP0, double R5FP1,
			int[] positionArray)
		{
			double[] minR0 = new double[7];
			double[] minR1 = new double[7];

			if (FP.Length > 1)
			{
				for (int i = 1; i < 7; i++)
				{
					minR0[i] = funFix2(R5FP0 * (1 - (20 - skills[1]) * i / 200.0));
					minR1[i] = funFix2(R5FP1 * (1 - (20 - skills[1]) * i / 200.0));
				}
				minR0[0] = funFix2(R5FP0 * (1 - (20 - skills[1]) * 62.0 / 93.0 / 200.0));
				minR1[0] = funFix2(R5FP1 * (1 - (20 - skills[1]) * 62.0 / 93.0 / 200.0));
			}
			else
			{
				double staGK;

				if (isGK)
					staGK = 4; //	GK
				else
					staGK = 1;

				for (int i = 1; i < 7; i++)
				{
					minR0[i] = funFix2(R5FP0 * (1 - (20 - skills[1]) * i / staGK / 200.0));
				}
				minR0[0] = funFix2(R5FP0 * (1 - (20 - skills[1]) * 62.0 / 93.0 / staGK / 200.0));
			}

			var R5FP = new double[] { R5FP0, R5FP1 };

			double[][] minR = new double[2][];

			for (int i = 0; i < positionArray.Length; i++)
			{
				if (i == 0)
					minR[i] = new double[] { minR0[0], minR0[1], minR0[2], minR0[4], minR0[6] };
				else
					minR[i] = new double[] { minR1[0], minR1[1], minR1[2], minR1[4], minR1[6] };
			}
			return ( R5FP, minR );
		}

		(double shotregular, double shotlong, double shothead) finish_type(double[] skillsB, double rou2)
		{
			var shotregular = funFix2(skillsB[11] * 0.5 + (skillsB[9] + skillsB[6] + skillsB[2]) / 3.0 * 0.4 + (skillsB[0] + skillsB[5]) / 2.0 * 0.1 + rou2);
			var shotlong = funFix2(skillsB[12] * 0.5 + (skillsB[9] + skillsB[11] + skillsB[6]) / 3.0 * 0.4 + (skillsB[0] + skillsB[5]) / 2.0 * 0.1 + rou2);
			var shothead = funFix2(skillsB[10] * 0.5 + (skillsB[0] * 2.0 + skillsB[6]) / 3.0 * 0.4 + (skillsB[2] + skillsB[5]) / 2.0 * 0.1 + rou2);
			return ( shotregular, shotlong, shothead );
		}

		(double bep, double futureSTA) bep_function(int newPlayer, bool notGK, double session, double allSum, double TI, double remainder, double ageMonths, double wage, int month)
		{
			double futureSTA = 0;
			double bep = 0;

			if (newPlayer == 0)
			{
				var futureSI = new double[8];
				var wage2 = new double[8];

				for (int i = 1; i < 8; i++)
				{
					if (notGK) futureSI[i] = MP((funFix1(TI / session / 10 * i + allSum + remainder * 1)), 7) / (MP(2, 9) * MP(5, 4) * MP(7, 7));
					else futureSI[i] = MP(funFix1(TI / session / 10 * i + allSum + remainder * 1) / 11 * 14, 7) / (MP(2, 9) * MP(5, 4) * MP(7, 7));
					wage2[i] = futureSI[i] * wage_rate;
				}

				if (notGK) 
					futureSTA = futureSI[6] * 500.0 * MP(300.0 / (ageMonths + 6), 2.5);
				else 
					futureSTA = futureSI[6] * 500.0 * MP(300.0 / (ageMonths + 6), 2.5) * 0.75;

				if (session < 5) 
					bep = futureSTA * 0.94 - wage * 7; // 移籍税6%　移籍不可期間6週＋1週分の給料
				else 
					bep = futureSTA * 0.94 - wage * (11 - session) - wage2[12 - (int)session] * (session - 4);
			}

			return ( bep, futureSTA );
		}



		double calcR5V(double R5Value_base, double i)
		{
			return MR(R5Value_base * i);
		}

		(double[] R5all,
				double minR5Value,
				double maxR5Value,
				double minR5Value2,
				double maxR5Value2,
				double[] R5Value,
				double[] R5Value2)
			calc_VALUE(double rou3,
			double ageMonths,
			double R5FP0, double R5FP1,
			int[] FP,
			double[][] REREC,
			bool notGK,
			double SI,
			double allSum,
			double session,
			int month, int year,
			int newPlayer,
			double TI,
			double session2,
			double staPrice,
			PlayerDataSkills playerData)
		{

			var ageValue = (1 / 50.0) * (100.0 - (100.0) * MP(Math.E, -1 * (443 - ageMonths) * 0.008)) * 240 / ageMonths;
			if (rou3 == 0)
				rou3 = 0.1;
			var rouValue = (1 / 80.0) * (100.0 - (100.0) * MP(Math.E, -rou3 / ((ageMonths - 179) * 0.283) * 1.529445597));
			var ratValue = R5FP0 > R5FP1 ? R5FP0 : R5FP1;

			var rankadapt = new double[] { 1, 1.3, 1.2, 1.2, 1.15, 1.15, 1.15, 1.15, 1.15, 1.15, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.05, 1.05, 1.05, 1.05, 1.05 };
			
			var NTValue = 1;

			//								   DC   DL/R DMC  DML/R MC  ML/R OMC  OML/R F	GK
			var posValueArray = new double[] { 1.2, 1.0, 1.1, 0.7, 1.2, 1.0, 0.9, 0.8, 1.2, 0.8 };
			double posValue;

			if (R5FP0 > R5FP1)
			{
				if (R5FP0 / R5FP1 > 1.05)
					posValue = posValueArray[FP[0]] * 1;
				else
					posValue = Math.Max(posValueArray[FP[0]] * 1, posValueArray[FP[1]] * 1);
			}
			else if (R5FP0 < R5FP1)
			{
				if (R5FP1 / R5FP0 > 1.05)
					posValue = posValueArray[FP[1]] * 1;
				else
					posValue = Math.Max(posValueArray[FP[0]] * 1, posValueArray[FP[1]] * 1);
			}
			else
				posValue = posValueArray[FP[0]] * 1;

			double FPValue;
			if (FP.Length > 1)
				FPValue = 1.1;
			else
				FPValue = 1;

			double FPR5pure;
			if ((FP.Length > 1) && (funFix2(REREC[1][FP[0]] * 1) < funFix2(REREC[1][FP[1]] * 1)))
				FPR5pure = funFix2(REREC[1][FP[1]] * 1);
			else
				FPR5pure = funFix2(REREC[1][FP[0]] * 1);

			double skillMax;
			if (notGK)
				skillMax = 280;
			else
				skillMax = 220;

			var SIValue = SI * skillMax / allSum * FPR5pure / 100;

			double[] TIValue;

			if (session <= month)
			{

				if (newPlayer > 0)
				{
					double aveTI = (27 - year) * 2;
					TIValue = new double[] { ML(aveTI) };
				}
				else
				{
					double aveTI = TI / session2;
					if (year <= 24)
					{
						if (year < 18)
							TIValue = new double[] { ML(aveTI) * (18 - year), ML(aveTI) * (19 - year) };
						else if (year == 18)
							TIValue = new double[] { ML(aveTI) / 3, ML(aveTI) };
						else if (year == 19)
							TIValue = new double[] { ML(aveTI) / 2, ML(aveTI) };
						else if (year == 20)
							TIValue = new double[] { ML(aveTI), ML(aveTI) * 2 };
						else if (year == 21 || year == 22)
							TIValue = new double[] { ML(aveTI), ML(aveTI) * ((25 - year) * 0.5) };
						else
							TIValue = new double[] { ML(aveTI), ML(aveTI) * 1.5 };
					}
					else
						TIValue = new double[] { ML(aveTI) };

					if (aveTI < 0)
					{
						if (year <= 24)
							TIValue = new double[] { 1 + aveTI / 10, 1 };
						else
							TIValue = new double[] { 1 + aveTI / 10 };
					}
					if (aveTI >= 0 && aveTI < 2.8)
					{
						if (year <= 24)
							TIValue = new double[] { 1, 1.1 };
						else
							TIValue = new double[] { 1 };
					}
				}
			}
			else
			{
				double[] aveTI;

				if (newPlayer > 0)
				{
					aveTI = new double[] { (27 - year) * 2 - 2, (27 - year) * 2 };
					TIValue = new double[] { ML(aveTI[0]), ML(aveTI[1]) };
				}
				else if (year <= 24)
				{
					if (year < 18)
					{
						aveTI = new double[] { TI / session2 - 2, TI / ((session2 - month) / 2 + month) };
						TIValue = new double[] { ML(aveTI[0]) * (18 - year), ML(aveTI[0]) * (19 - year), ML(aveTI[1]) * (18 - year), ML(aveTI[1]) * (19 - year) };
					}
					else if (year == 18)
					{
						aveTI = new double[] { TI / ((session2 - month) * 1.5 + month), TI / ((session2 - month) / 1.5 + month) };
						TIValue = new double[] { ML(aveTI[0]) / 3, ML(aveTI[0]), ML(aveTI[1]) / 3, ML(aveTI[1])};
					}
					else if (year == 19)
					{
						aveTI = new double[] { TI / ((session2 - month) * 4 + month), TI / session2 };
						TIValue = new double[] { ML(aveTI[0]) / 2, ML(aveTI[0]), ML(aveTI[1]) / 2, ML(aveTI[1]) };
					}
					else if (year == 20 || year == 21)
					{
						aveTI = new double[] { TI / ((session2 - month) * 3 + month), TI / ((session2 - month) / 2 + month) };
						if (year == 20)
							TIValue = new double[] { ML(aveTI[0]), ML(aveTI[0]) * 2, ML(aveTI[1]), ML(aveTI[1]) * 2 };
						else
							TIValue = new double[] { ML(aveTI[0]), ML(aveTI[0]) * ((25 - year) * 0.5), ML(aveTI[1]), ML(aveTI[1]) * ((25 - year) * 0.5) };
					}
					else
					{
						aveTI = new double[] { TI / ((session2 - month) * 3 + month), TI / session2 - 1 };
						if (year == 22)
							TIValue = new double[] { ML(aveTI[0]), ML(aveTI[0]) * ((25 - year) * 0.5), ML(aveTI[1]), ML(aveTI[1]) * ((25 - year) * 0.5) };
						else
							TIValue = new double[] { ML(aveTI[0]), ML(aveTI[0]) * 1.5, ML(aveTI[1]), ML(aveTI[1]) * 1.5 };
					}
				}
				else
				{
					aveTI = new double[] { TI / session2 - 0.5, TI / session2 };
					TIValue = new double[] { ML(aveTI[0]), ML(aveTI[1]) };
				}

				if (year <= 24)
				{
					if (aveTI[0] < 0)
					{
						TIValue[0] = 1 + aveTI[0] / 10;
						TIValue[1] = 1 + aveTI[0] / 10;
					}
					if (aveTI[1] < 0)
					{
						TIValue[2] = 1 + aveTI[1] / 10;
						TIValue[3] = 1 + aveTI[1] / 10;
					}
					if (aveTI[0] >= 0 && aveTI[0] < 2.8)
					{
						TIValue[0] = 1;
						TIValue[1] = 1;
					}
					if (aveTI[1] >= 0 && aveTI[1] < 2.8)
					{
						TIValue[2] = 1;
						TIValue[3] = 1;
					}
				}
				else
				{
					if (aveTI[0] < 0)
						TIValue[0] = 1 + aveTI[0] / 10;
					if (aveTI[1] < 0)
						TIValue[1] = 1 + aveTI[1] / 10;
					if (aveTI[0] >= 0 && aveTI[0] < 2.8)
						TIValue[0] = 1;
					if (aveTI[1] >= 0 && aveTI[1] < 2.8)
						TIValue[1] = 1;
				}
			}
			
			double bloom = 1;
			if (notGK)
			{
				SI = SI * 1;
				if (year == 18)
				{
					if (SI >= 50000)
						bloom = 0.3;
					if (SI > 25000 && SI < 50000)
						bloom = 0.4;
				}
				if (year == 19)
				{
					if (SI >= 100000)
						bloom = 0.4;
					if (SI >= 75000 && SI < 100000)
						bloom = 0.5;
					if (SI > 50000 && SI < 75000)
						bloom = 0.6;
				}
				if (year == 20)
				{
					if (SI >= 150000)
						bloom = 0.5;
					if (SI >= 100000 && SI < 150000)
						bloom = 0.6;
					if (SI > 75000 && SI < 100000)
						bloom = 0.7;
				}
				if (year == 21)
				{
					if (SI >= 200000)
						bloom = 0.6;
					if (SI >= 150000 && SI < 200000)
						bloom = 0.7;
					if (SI > 100000 && SI < 150000)
						bloom = 0.8;
				}
				if (year == 22)
				{
					if (SI >= 250000)
						bloom = 0.7;
					if (SI >= 200000 && SI < 250000)
						bloom = 0.8;
					if (SI > 150000 && SI < 200000)
						bloom = 0.9;
				}
				if (year == 23)
				{
					if (SI >= 300000)
						bloom = 0.8;
					if (SI >= 250000 && SI < 300000)
						bloom = 0.9;
				}
				if (year == 24 && SI >= 350000)
					bloom = 0.9;
			}

			var R5Value_base = SIValue * wage_rate * ageValue * rouValue * ratValue * NTValue * FPValue * posValue * (1 + ((ratValue - 100) / 100.0)) * bloom;

			double[] R5Value;
			double maxR5Value = double.NegativeInfinity;
			double minR5Value = double.PositiveInfinity;

			if (session <= month)
			{
				if (newPlayer == 0 && year <= 24)
				{
					R5Value = new double[] { calcR5V(R5Value_base, TIValue[0]), calcR5V(R5Value_base, TIValue[1]) };

					maxR5Value = Math.Max(R5Value[0], R5Value[1]);
					minR5Value = Math.Min(R5Value[0], R5Value[1]);
					maxR5Value = Math.Max(maxR5Value, staPrice);
					minR5Value = Math.Max(minR5Value, staPrice);
				}
				else
				{
					R5Value = new double[] { calcR5V(R5Value_base, TIValue[0]) };
					R5Value[0] = Math.Max(R5Value[0], staPrice);
				}
			}
			else
			{
				if (newPlayer == 0 && year <= 24)
					R5Value = new double[] { calcR5V(R5Value_base, TIValue[0]), calcR5V(R5Value_base, TIValue[1]), calcR5V(R5Value_base, TIValue[2]), calcR5V(R5Value_base, TIValue[3]) };
				else
					R5Value = new double[] { calcR5V(R5Value_base, TIValue[0]), calcR5V(R5Value_base, TIValue[1]) };

				foreach (var r5val in R5Value)
				{
					maxR5Value = Math.Max(maxR5Value, r5val);
					minR5Value = Math.Min(minR5Value, r5val);
				}

				maxR5Value = Math.Max(maxR5Value, staPrice);
				minR5Value = Math.Max(minR5Value, staPrice);
			}

			double[] R5all = null;
			double maxR5Value2 = double.NegativeInfinity;
			double minR5Value2 = double.PositiveInfinity;
			double[] R5Value2 = null;

			R5all = new double[] 
			{ 
				REREC[2][0], 
				REREC[2][1], 
				REREC[2][1], 
				REREC[2][2], 
				REREC[2][3], 
				REREC[2][3], 
				REREC[2][4], 
				REREC[2][5], 
				REREC[2][5], 
				REREC[2][6], 
				REREC[2][7], 
				REREC[2][7], 
				REREC[2][8] 
			};

			if (playerData.Hidden != null)
			{
				int valueFP;
				if (R5FP0 > R5FP1)
					valueFP = FP[0];
				else
					valueFP = FP[1];

				var inju = (int)playerData.Hidden.Inj;
				var aggr = (int)playerData.Hidden.Agg;
				var prof = (int)playerData.Hidden.Pro;
				var adap = (int)playerData.Hidden.Ada;
				var injuValue = new double[] { 0, 0.050, 0.040, 0.030, 0.020, 0.010, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.010, -0.020, -0.030, -0.040, -0.050 };
				var aggrValue = new double[][] {
						new double [] {0, 0.100, 0.080, 0.060, 0.040, 0.020, 0, 0, 0, 0, 0, 0, 0, -0.020, -0.040, -0.060, -0.080, -0.100, -0.120, -0.140, -0.160 },
						new double [] {0, 0.100, 0.080, 0.060, 0.040, 0.020, 0, 0, 0, 0, 0, 0, 0, -0.020, -0.040, -0.060, -0.080, -0.100, -0.120, -0.140, -0.160},
						new double [] {0, 0.100, 0.080, 0.060, 0.040, 0.020, 0, 0, 0, 0, 0, 0, 0, -0.020, -0.040, -0.060, -0.080, -0.100, -0.120, -0.140, -0.160},
						new double [] {0, 0.080, 0.060, 0.050, 0.030, 0.010, 0, 0, 0, 0, 0, 0, 0, -0.010, -0.020, -0.030, -0.040, -0.050, -0.060, -0.080, -0.100},
						new double [] {0, 0.080, 0.060, 0.050, 0.030, 0.010, 0, 0, 0, 0, 0, 0, 0, -0.010, -0.020, -0.030, -0.040, -0.050, -0.060, -0.080, -0.100},
						new double [] {0, 0.080, 0.060, 0.050, 0.030, 0.010, 0, 0, 0, 0, 0, 0, 0, -0.010, -0.020, -0.030, -0.040, -0.050, -0.060, -0.080, -0.100},
						new double [] {0, 0.040, 0.030, 0.020, 0.010, 0.005, 0, 0, 0, 0, 0, 0, 0, -0.005, -0.010, -0.010, -0.020, -0.020, -0.030, -0.030, -0.040},
						new double [] {0, 0.040, 0.030, 0.020, 0.010, 0.005, 0, 0, 0, 0, 0, 0, 0, -0.005, -0.010, -0.010, -0.020, -0.020, -0.030, -0.030, -0.040},
						new double [] {0, 0.040, 0.030, 0.020, 0.010, 0.005, 0, 0, 0, 0, 0, 0, 0, -0.005, -0.010, -0.010, -0.020, -0.020, -0.030, -0.030, -0.040},
						new double [] {0, 0.020, 0.015, 0.010, 0.005, 0.003, 0, 0, 0, 0, 0, 0, 0, -0.003, -0.005, -0.005, -0.010, -0.010, -0.015, -0.015, -0.020},
						new double [] {0, 0.020, 0.015, 0.010, 0.005, 0.003, 0, 0, 0, 0, 0, 0, 0, -0.003, -0.005, -0.005, -0.010, -0.010, -0.015, -0.015, -0.020},
						new double [] {0, 0.020, 0.015, 0.010, 0.005, 0.003, 0, 0, 0, 0, 0, 0, 0, -0.003, -0.005, -0.005, -0.010, -0.010, -0.015, -0.015, -0.020 },
						new double [] { 0, 0.010, 0.008, 0.006, 0.004, 0.002, 0, 0, 0, 0, 0, 0, 0, -0.002, -0.004, -0.004, -0.006, -0.006, -0.008, -0.008, -0.010 } };

				var profValue = new double[] { 0, -0.020, -0.015, -0.010, -0.005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.005, 0.010, 0.015, 0.020, 0.025, 0.030 };
				

				double minR5 = double.PositiveInfinity;
				double maxR5 = double.NegativeInfinity;
				foreach (var r5val in R5all)
				{
					maxR5 = Math.Max(maxR5, r5val);
					minR5 = Math.Min(minR5, r5val);
				}

				var adapValue = new double[] { 0, -0.020, -0.015, -0.010, -0.005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.005, 0.010, 0.015, 0.020, 0.025, 0.030 };

				double hiddenValue;
				if (notGK)
				{
					if (minR5 / maxR5 >= 0.9)
						hiddenValue = 1.0 + injuValue[inju] + aggrValue[valueFP][aggr] + profValue[prof] + adapValue[adap]; // R5の最大値と最小値の差が10%以上だった場合にはadapValueを加算しない。
					else
						hiddenValue = 1.0 + injuValue[inju] + aggrValue[valueFP][aggr] + profValue[prof];
				}
				else
					hiddenValue = 1 + injuValue[inju] * 2 + profValue[prof];

				var R5Value2_base = R5Value_base * hiddenValue;

				if (session <= month)
				{
					if (newPlayer == 0 && year <= 24)
					{
						R5Value2 = new double[] { calcR5V(R5Value2_base, TIValue[0]), calcR5V(R5Value2_base, TIValue[1]) };
						
						maxR5Value2 = Math.Max(R5Value2[0], R5Value2[1]);
						minR5Value2 = Math.Min(R5Value2[0], R5Value2[1]);
						maxR5Value2 = Math.Max(maxR5Value2, staPrice);
						minR5Value2 = Math.Max(minR5Value2, staPrice);
					}
					else
					{
						R5Value2 = new double[] { calcR5V(R5Value2_base, TIValue[0]) };
						R5Value2 = new double[] { Math.Max(R5Value2[0], staPrice) };
					}
				}
				else
				{
					if (newPlayer == 0 && year <= 24)
						R5Value2 = new double[] { calcR5V(R5Value2_base, TIValue[0]), calcR5V(R5Value2_base, TIValue[1]), calcR5V(R5Value2_base, TIValue[2]), calcR5V(R5Value2_base, TIValue[3]) };
					else
						R5Value2 = new double[] { calcR5V(R5Value2_base, TIValue[0]), calcR5V(R5Value2_base, TIValue[1]) };

					foreach (var r5val in R5Value2)
					{
						maxR5Value2 = Math.Max(maxR5Value2, r5val);
						minR5Value2 = Math.Min(minR5Value2, r5val);
					}

					maxR5Value2 = Math.Max(maxR5Value2, staPrice);
					minR5Value2 = Math.Max(minR5Value2, staPrice);
				}
			}

			return (R5all, minR5Value, maxR5Value, minR5Value2, maxR5Value2, R5Value, R5Value2);

		}



		(double R5FP0, double R5FP1, double[] posGain, double[] posKeep, double headerBonus, double ckBonus, double fkBonus, double pkBonus, double allBonus) 
			calc_R5bonus(double[] skillsB_rou, double[] skills,
			double [][] REREC, int[] FP, bool isGK)
		{
			var headerBonus = skillsB_rou[10] > 12 ? funFix2((MP(Math.E, MP(skillsB_rou[10] - 10, 3) / 1584.77) - 1) * 0.8 + MP(Math.E, (skillsB_rou[0] * skillsB_rou[0] * 0.007) / 8.73021) * 0.15 + MP(Math.E, (skillsB_rou[6] * skillsB_rou[6] * 0.007) / 8.73021) * 0.05) : 0;
			var fkBonus = funFix2(MP(Math.E, MP(skillsB_rou[13] + skillsB_rou[12] + skillsB_rou[9] * 0.5, 2) * 0.002) / 327.92526);
			var ckBonus = funFix2(MP(Math.E, MP(skillsB_rou[13] + skillsB_rou[8] + skillsB_rou[9] * 0.5, 2) * 0.002) / 983.65770);
			var pkBonus = funFix2(MP(Math.E, MP(skillsB_rou[13] + skillsB_rou[11] + skillsB_rou[9] * 0.5, 2) * 0.002) / 1967.31409);
			var gainBase = funFix2((skillsB_rou[0] * skillsB_rou[0] + skillsB_rou[1] * skillsB_rou[1] * 0.5 + skillsB_rou[2] * skillsB_rou[2] * 0.5 + skillsB_rou[3] * skillsB_rou[3] + skillsB_rou[4] * skillsB_rou[4] + skillsB_rou[5] * skillsB_rou[5] + skillsB_rou[6] * skillsB_rou[6]) / 6.0 / (22.9 * 22.9));
			var keepBase = funFix2((skillsB_rou[0] * skillsB_rou[0] * 0.5 + skillsB_rou[1] * skillsB_rou[1] * 0.5 + skillsB_rou[2] * skillsB_rou[2] + skillsB_rou[3] * skillsB_rou[3] + skillsB_rou[4] * skillsB_rou[4] + skillsB_rou[5] * skillsB_rou[5] + skillsB_rou[6] * skillsB_rou[6]) / 6.0 / (22.9 * 22.9));
			//	0:DC			1:DL/R			2:DMC			3:DML/R			4:MC			5:ML/R			6:OMC			7:OML/R			8:F
			var posGain = new double[] { gainBase * 0.3, gainBase * 0.3, gainBase * 0.9, gainBase * 0.6, gainBase * 1.5, gainBase * 0.9, gainBase * 0.9, gainBase * 0.6, gainBase * 0.3 };
			var posKeep = new double[] { keepBase * 0.3, keepBase * 0.3, keepBase * 0.9, keepBase * 0.6, keepBase * 1.5, keepBase * 0.9, keepBase * 0.9, keepBase * 0.6, keepBase * 0.3 };

			var allBonus = skills.Length == 11 ? 0 : headerBonus * 1 + fkBonus * 1 + ckBonus * 1 + pkBonus * 1;

			double R5FP0, R5FP1 = 0;

			if (isGK)
			{
				R5FP0 = funFix2(REREC[2][FP[0]] * 1 + allBonus * 1);
			}
			else
			{
				R5FP0 = funFix2(REREC[2][FP[0]] * 1 + allBonus * 1 + posGain[FP[0]] * 1 + posKeep[FP[0]] * 1);
				if (FP.Length > 1)
					R5FP1 = funFix2(REREC[2][FP[1]] * 1 + allBonus * 1 + posGain[FP[1]] * 1 + posKeep[FP[1]] * 1);
			}
			return (R5FP0, R5FP1, posGain, posKeep, headerBonus, ckBonus, fkBonus, pkBonus, allBonus);
		}

		(double weight, double session, int newPlayer, double TI, double session2, double wage)
			calc_TI(PlayerDataSkills playerData)
		{
			var wage = playerData.Wage;
			var today = new DateTime();
			var playerID = playerData.ID;
			var SI = playerData.ASI;
			var notGK = (playerData.FPn != 0);

			var training1 = new DateTime(2020, 01, 20, 23, 0, 0, DateTimeKind.Utc);

			var day = (today - training1).TotalDays; // 1000 / 3600 / 24;

			while (day > 84 - 16 / 24)
				day -= 84;
			var SS = new DateTime(2020, 01, 20, 8, 0, 0, DateTimeKind.Utc);

			var session = MF(day / 7) + 1;
			var check = (today - SS).TotalDays;
			var season = 84;

			var count = 0;
			var ageMax = 20.1 + session / 12;

			while (check > season)
			{
				check -= season;
				count++;
			}

			int newPlayer;
			if (wage == 30000 || (playerID > youthID && count == 0))
			{
				newPlayer = 1;
				wage_rate = 23.75;
			}
			else if (wage > 30000 && (playerID > youthID && count == 0))
			{
				newPlayer = 2;
				wage_rate = 23.75;
			}
			else 
				newPlayer = 0;

			double weight;
			if (notGK)
			{
				weight = 263533760000;
			}
			else
			{
				weight = 48717927500;
			}

			var TI = MP(2.0, ML(weight * SI) / ML(MP(2.0, 7.0))) - MP(2.0, ML(weight * wage / (wage_rate)) / ML(MP(2.0, 7.0)));
			TI = MR(TI * 10.0);

			double session2 = session == 0 ? 12 : session;

			return (weight, session, newPlayer, TI, session2, wage);			
		}

		(double staPrice, double maxPrice) calc_SellToAgent(PlayerDataSkills playerData)
		{
			(int ageMonths, int months, int year) = calc_age(playerData);
			var notGK = (playerData.FPn != 0);
			var SI = playerData.ASI;

			double staPrice;
			if (notGK)
				staPrice = SI * 500 * MP(300 / ageMonths, 2.5);
			else
				staPrice = SI * 500 * MP(300 / ageMonths, 2.5) * 0.75;

			double maxPrice = SI * (192400 / (ageMonths / 12) - 5200);
			if (maxPrice < staPrice)
				maxPrice = staPrice;

			return (staPrice, maxPrice);
		}

		(int ageMonths, int months, int year) calc_age(PlayerDataSkills playerData)
		{
			double age = (TmWeek.thisWeek().absweek - playerData.wBorn) / 12.0;
			var year = (int)Math.Floor(age);
			var month = (int)Math.Round(age * 12 - year * 12);
			var ageMonths = year * 12 + month * 1;

			return (ageMonths, month, year);
		}

		private double[][] calculateREREC(int positionIndex,
			double[] skills, double SI, double rou)
		{
			double weight;

			if (positionIndex == 13)
				weight = 48717927500;
			else
				weight = 263533760000;

			double[] rec = new double[10];           // RERECb
			double[] ratingR = new double[10];       // RatingR4
			double[] ratingR4 = new double[10];      // RatingR4 + routine
			double skillSum = 0;

			for (var i = 0; i < skills.Length; i++)
			{
				skillSum += skills[i];
			}
			for (var i = 0; 2 + i <= positionIndex; i += 2)
			{       // TrExMaとRECのweight表のずれ修正
				positionIndex--;
			}
			var remainder = Math.Round((Math.Pow(2, Math.Log(weight * SI) / Math.Log(Math.Pow(2, 7))) - skillSum) * 10) / 10;       // RatingR4 remainder
			for (var i = 0; i < 10; i++)
			{
				rec[i] = 0;
				ratingR[i] = 0;
			}
			for (var j = 0; j < 9; j++)
			{       // All position
				var remWeightREC = 0.0;       // REREC remainder weight sum
				var remWeightRat = 0.0;       // RatingR4 remainder weight sum
				var not20 = 0;                  // 20以外のスキル数
				if (positionIndex == 9) j = 9;  // GK

				for (var i = 0; i < WeightR.Cols; i++)
				{
					rec[j] += skills[i] * WeightRb[j, i];
					ratingR[j] += skills[i] * WeightR5[j, i];
					if (skills[i] != 20)
					{
						remWeightREC += WeightRb[j, i];
						remWeightRat += WeightR5[j, i];
						not20++;
					}
				}
				if (remainder / not20 > 0.9 || not20 == 0)
				{
					if (positionIndex == 9) not20 = 11;
					else not20 = 14;
					remWeightREC = 1;
					remWeightRat = 5;
				}

				rec[j] = (rec[j] + remainder * remWeightREC / not20 - 2.0) / 3.0;
				ratingR[j] += remainder * remWeightRat / not20;
				ratingR4[j] = ratingR[j] + rou * 5;
				ratingR[j] = ratingR[j];
				if (positionIndex == 9) j = 9;      // Loop end
			}

			var recAndRating = new double[3][];
			recAndRating[0] = rec;
			recAndRating[1] = ratingR;
			recAndRating[2] = ratingR4;

			return recAndRating;
		}

		private double calculateREREC2(int positionIndex,
			double[] skills, double SI)
		{
			double skillWeightSum;
			double weight;

			if (positionIndex == 13)
			{
				skillWeightSum = Math.Pow(SI, 0.143) / 0.02979;         // GK Skillsum
				weight = 48717927500;
			}
			else
			{
				skillWeightSum = Math.Pow(SI, 1.0 / 6.99194) / 0.02336483;    // Other Skillsum
				weight = 263533760000;
			}

			var skillSum = 0.0;
			for (var j = 0; j < skills.Length; j++)
			{
				skillSum += skills[j];
			}
			var remainder = Math.Round((Math.Pow(2.0, Math.Log(weight * SI) / Math.Log(Math.Pow(2.0, 7.0))) - skillSum) * 10) / 10;       // 正確な余り
			var rec = 0.0;
			var weightSum = 0.0;
			var not20 = 0;

			for (int i = 0; 2 + i <= positionIndex; i += 2)
			{       // TrExMaとRECのweight表のずれ修正
				positionIndex--;
			}

			if (positionIndex == -1)
				return 0;

			skillWeightSum -= skillSum;         // REREC remainder
			for (var i = 0; i < WeightR.Cols; i++)
			{
				rec += skills[i] * WeightR[positionIndex, i];
				if (skills[i] != 20)
				{
					weightSum += WeightR[positionIndex, i];
					not20++;
				}
			}
			if (remainder / not20 > 0.9 || not20 == 0)
			{
				weightSum = 0;
				for (var i = 0; i < WeightR.Cols; i++)
					weightSum += WeightR[positionIndex, i];
				if (positionIndex == 9) not20 = 11;
				else not20 = 14;
			}
			rec += skillWeightSum * weightSum / not20;  // REREC Score
			if (positionIndex == 9) rec *= 1.27;                    // GK
			rec = (rec - RecLast[0, positionIndex]) / RecLast[1, positionIndex];

			return rec;
		}


		protected override (double min, double max) MinMaxRatingForSkillsum(int FPn, double skillsSum)
        {
            int[] FP = Rating.GetPositionIndex(FPn);
            int[] RP = new int[] { Tm_Utility.FpToRp(FP[0]), Tm_Utility.FpToRp(FP[1]) };

            if (RP[1] == -1)
            {
                double min = 0, max = 0;
                int i = 0;
                double d = 0;

                for (; d < skillsSum - 20; d += 20, i++)
                    min += OrderedWeightRat[RP[0], i] * 20;

                min += OrderedWeightRat[RP[0], i] * (skillsSum - d);

                i = 13;
                d = 0;

                for (; d < skillsSum - 20; d += 20, i--)
                    max += OrderedWeightRat[RP[0], i] * 20;

                max += OrderedWeightRat[RP[0], i] * (skillsSum - d);

                return (min, max);
            }
            else
            {
                double min1 = 0, max1 = 0, min2 = 0, max2 = 0;

                int i = 0;
                double d = 0;
                for (; d < skillsSum - 20; d += 20, i++)
                    min1 += OrderedWeightRat[RP[0], i] * 20;
                min1 += OrderedWeightRat[RP[0], i] * (skillsSum - d);

                i = 0;
                d = 0;
                for (; d < skillsSum - 20; d += 20, i++)
                    min2 += OrderedWeightRat[RP[1], i] * 20;
                min2 += OrderedWeightRat[RP[1], i] * (skillsSum - d);

                i = 13;
                d = 0;
                for (; d < skillsSum - 20; d += 20, i--)
                    max1 += OrderedWeightRat[RP[0], i] * 20;
                max1 += OrderedWeightRat[RP[0], i] * (skillsSum - d);

                i = 13;
                d = 0;
                for (; d < skillsSum - 20; d += 20, i--)
                    max2 += OrderedWeightRat[RP[1], i] * 20;
                max2 += OrderedWeightRat[RP[1], i] * (skillsSum - d);

                return ((min1 < min2) ? min2 : min1, max1 < max2 ? max2 : max1);
            }
        }

        internal override double[] Relevances(int FPn)
        {
            if (FPn != 0)
            {
                int[] posIndex = Rating.GetPositionIndex(FPn);

                double[] relevances = new double[14];

                for (int i = 0; i < 14; i++)
                {
                    double W1 = 80 * WeightRat[Tm_Utility.FpToRp(posIndex[0]), i];

                    if (posIndex[1] == -1)
                    {
                        relevances[i] = W1;
                        continue;
                    }

                    double W2 = 80 * WeightRat[Tm_Utility.FpToRp(posIndex[1]), i];

                    relevances[i] = (W1 > W2 ? W1 : W2);
                }

                return relevances;
            }
            else
            {
                double[] relevances = new double[11];

                for (int i = 0; i < 11; i++)
                {
                    relevances[i] = 80 * WeightRat[9, i];
                }

                return relevances;
            }
        }

        public double GetOSi(Rating R, PlayerDataSkills pds)
        {
            double rMax = R.rating[0];
            // Find the maximum speciality result

            for (int i = 1; i < R.rating.Length; i++)
                rMax = Math.Max(rMax, R.rating[i]);

            double skillsSum = pds.SkillSum;

            (double min, double max) = MinMaxRatingForSkillsum(pds.FPn, skillsSum);

            return (rMax - min) / (max - min) * 100;
        }

        public double[] seasonTI(PlayerDataSkills playerData)
        {
            var wage = playerData.Wage;
            var today = new DateTime();
            var playerID = playerData.ID;

            // s50 start
            var SS = new DateTime(2017, 04, 17, 8, 0, 0, DateTimeKind.Utc);
            // first training
            var training1 = new DateTime(2017, 04, 17, 23, 0, 0, DateTimeKind.Utc);
            
            var day = (today - training1).TotalDays; // 1000 / 3600 / 24;
            while (day > 84 - 16 / 24) day -= 84;

            var session = Math.Floor(day / 7) + 1;                          // training sessions
            var ageMax = 20.1 + session / 12;                           // max new player age

            double age = (TmWeek.thisWeek().absweek - playerData.wBorn) / 12.0;

            var check = (today - SS).TotalDays;
            var season = 84;
            var count = 0;

            double SI = playerData.ASI;

            while (check > season)
            {
                check -= season;
                count++;
            }

            var weight = 0.0;
            if (playerData.FPn > 0) weight = 263533760000;
            else weight = 48717927500;

            double[] seasonTI;

            if (wage == 30000 || (playerID > 119142233 && count == 0))
            {   // s50 youth player ID
                seasonTI = null;
            }
            else
            {
                var TI1 = Math.Pow(2, Math.Log(weight * SI) / Math.Log(Math.Pow(2, 7))) - Math.Pow(2, Math.Log(weight * wage / (wage_rate)) / Math.Log(Math.Pow(2, 7)));
                TI1 = Math.Round(TI1 * 10);

                if (session == 0)
                    seasonTI = new double[] { TI1, TI1 };
                else
                    seasonTI = new double[] { TI1, TI1 / session };
            }

            if (playerID > 118768860 && age < ageMax)
            {       
                // s50 BOT player ID
                if (wage == 30000)
                    seasonTI = null;
                else
                {
                    wage_rate = 23.75;
                    var TI2 = Math.Pow(2, Math.Log(weight * SI) / Math.Log(Math.Pow(2, 7))) - Math.Pow(2, Math.Log(weight * wage / (wage_rate)) / Math.Log(Math.Pow(2, 7)));
                    seasonTI = new double[] { TI2, TI2 };
                }
            }

            return seasonTI;
        }

        public RatingR5()
        {
            SettingInitialize();
        }

        public WeightMatrix WeightR
        {
            get => (WeightMatrix)this["WeightR"];
            set => this["WeightR"] = value;
        }

        public WeightMatrix WeightRb
        {
            get => (WeightMatrix)this["WeightRb"];
            set => this["WeightRb"] = value;
        }

        public WeightMatrix RecLast
        {
            get => (WeightMatrix)this["RecLast"];
            set => this["RecLast"] = value;
        }

        public WeightMatrix WeightR5
        {
            get => (WeightMatrix)this["WeightR5"];
            set
            {
                this["WeightR5"] = value;
                OrderedWeightRat = SortRowsByCols(value);
            }
        }

		public WeightMatrix WeightASho	 { get => (WeightMatrix)this["WeightASho"]; set  => this["WeightASho"] = value; }
		public WeightMatrix WeightASho2	 { get => (WeightMatrix)this["WeightASho2"]; set =>  this["WeightASho2"] = value; }
		public WeightMatrix WeightAThr	 { get => (WeightMatrix)this["WeightAThr"]; set  => this["WeightAThr"] = value; }
		public WeightMatrix WeightAThr2	 { get => (WeightMatrix)this["WeightAThr2"]; set =>  this["WeightAThr2"] = value; }
		public WeightMatrix WeightAWin	 { get => (WeightMatrix)this["WeightAWin"]; set  => this["WeightAWin"] = value; }
		public WeightMatrix WeightAWin2	 { get => (WeightMatrix)this["WeightAWin2"]; set =>  this["WeightAWin2"] = value; }
		public WeightMatrix WeightADir	 { get => (WeightMatrix)this["WeightADir"]; set  => this["WeightADir"] = value; }
		public WeightMatrix WeightADir2	 { get => (WeightMatrix)this["WeightADir2"]; set =>  this["WeightADir2"] = value; }
		public WeightMatrix WeightALon	 { get => (WeightMatrix)this["WeightALon"]; set  => this["WeightALon"] = value; }
		public WeightMatrix WeightALon2	 { get => (WeightMatrix)this["WeightALon2"]; set =>  this["WeightALon2"] = value; }
		public WeightMatrix WeightABal	 { get => (WeightMatrix)this["WeightABal"]; set  => this["WeightABal"] = value; }
		public WeightMatrix WeightABal2	 { get => (WeightMatrix)this["WeightABal2"]; set =>  this["WeightABal2"] = value; }
		public WeightMatrix WeightDSho	 { get => (WeightMatrix)this["WeightDSho"]; set  => this["WeightDSho"] = value; }
		public WeightMatrix WeightDSho2	 { get => (WeightMatrix)this["WeightDSho2"]; set =>  this["WeightDSho2"] = value; }
		public WeightMatrix WeightDThr	 { get => (WeightMatrix)this["WeightDThr"]; set  => this["WeightDThr"] = value; }
		public WeightMatrix WeightDThr2	 { get => (WeightMatrix)this["WeightDThr2"]; set =>  this["WeightDThr2"] = value; }
		public WeightMatrix WeightDWin	 { get => (WeightMatrix)this["WeightDWin"]; set  => this["WeightDWin"] = value; }
		public WeightMatrix WeightDWin2	 { get => (WeightMatrix)this["WeightDWin2"]; set =>  this["WeightDWin2"] = value; }
		public WeightMatrix WeightDDir	 { get => (WeightMatrix)this["WeightDDir"]; set  => this["WeightDDir"] = value; }
		public WeightMatrix WeightDDir2	 { get => (WeightMatrix)this["WeightDDir2"]; set =>  this["WeightDDir2"] = value; }
		public WeightMatrix WeightDLon	 { get => (WeightMatrix)this["WeightDLon"]; set  => this["WeightDLon"] = value; }
		public WeightMatrix WeightDLon2	 { get => (WeightMatrix)this["WeightDLon2"]; set =>  this["WeightDLon2"] = value; }
		public WeightMatrix WeightDBal	 { get => (WeightMatrix)this["WeightDBal"]; set  => this["WeightDBal"] = value; }
		public WeightMatrix WeightDBal2	 { get => (WeightMatrix)this["WeightDBal2"]; set =>  this["WeightDBal2"] = value; }


		public override WeightMatrix WeightRat { get => WeightR5; set => WeightR5 = value; }
        
        /// <summary>
        /// This function initialize settings for the object
        /// </summary>
        public override void SettingInitialize()
        {
            Name = "RatingR5";
            ShortName = "R5";
            WeightR = _weightR;
            WeightR5 = _weightR5;
            WeightRb = _weightRb;
            RoutineFactor = _routineFactor;
            RecLast = _recLast;

			WeightASho	 = _weightASho	;
			WeightASho2	 = _weightASho2	;
			WeightAThr	 = _weightAThr	;
			WeightAThr2	 = _weightAThr2	;
			WeightAWin	 = _weightAWin	;
			WeightAWin2	 = _weightAWin2	;
			WeightADir	 = _weightADir	;
			WeightADir2	 = _weightADir2	;
			WeightALon	 = _weightALon	;
			WeightALon2	 = _weightALon2	;
			WeightABal	 = _weightABal	;
			WeightABal2	 = _weightABal2	;
			WeightDSho	 = _weightDSho	;
			WeightDSho2	 = _weightDSho2	;
			WeightDThr	 = _weightDThr	;
			WeightDThr2	 = _weightDThr2	;
			WeightDWin	 = _weightDWin	;
			WeightDWin2	 = _weightDWin2	;
			WeightDDir	 = _weightDDir	;
			WeightDDir2	 = _weightDDir2	;
			WeightDLon	 = _weightDLon	;
			WeightDLon2	 = _weightDLon2	;
			WeightDBal	 = _weightDBal	;
			WeightDBal2 = _weightDBal2;


			Def("RatingFunctionType", eRatingFunctionType.RatingR5);
        }
    }
}
